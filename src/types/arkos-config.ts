import express from "express";
import { Options as RateLimitOptions } from "express-rate-limit";
import { ClassValidatorArkosConfigOptions } from "../utils/validate-dto";

export type ArkosConfigAuthenticationOptions = {
  /**
   * Defines whether to use Static or Dynamic Role-Based Acess Control
   *
   * Visit [www.arkosjs.com/docs/core-concepts/built-in-authentication-system](https://www.arkosjs.com/docs/core-concepts/built-in-authentication-system) for more details.
   */
  mode: "static" | "dynamic";
  /**
   * Defines auth login related configurations to customize the api.
   */
  login?: {
    /** Defines wether to send the access token in response after login or only send as cookie, defeault is both.*/
    sendAccessTokenThrough?: "cookie-only" | "response-only" | "both";
  };
  /** Defines the field that will be used as username by the built-in auth system, by default arkos will look for the field "username" in your model User, hence when making login for example you must send:
   *
   * ```json
   *  {
   *    "username": "johndoe",
   *    "password": "somePassword123"
   *  }
   * ```
   *
   * **Note:** You can also modify the usernameField on the fly by passing it to the request query parameters. example:
   *
   * ```curl
   * POST /api/auth/login?usernameField=email
   * ```
   *
   * By specifing here another field for username, for example passing "email", "companyCode" or something else your json will be like:
   *
   * **Example with email**
   *
   * ```json
   *  {
   *    "email": "john.doe@example.com",
   *    "password": "somePassword123"
   *  }
   * ```
   */
  usernameField?: string;
  /**
   * Specifies the regex pattern used by the authentication system to enforce password strength requirements.
   *
   * **Important**: If using validation libraries like Zod or class-validator, ensure that any regex applied to the password field matches this pattern to maintain consistency.
   *
   * **Default**: ```/^(?=.*[A-Z])(?=.*[a-z])(?=.*\d).+$/``` - Ensures the password contains at least one uppercase letter, one lowercase letter, and one numeric digit.
   *
   * **message**: (Optional) A custom error message to display when the password does not meet the required strength criteria.
   */
  passwordValidation?: { regex: RegExp; message?: string };
  /**
   * Allows to specify the request rate limit for all authentication endpoints but `/api/users/me`.
   * 
   * #### Default
   *{
      windowMs: 5000,
      limit: 10,
      standardHeaders: "draft-7",
      legacyHeaders: false,
    }
   * 
   * Passing an object not overriding all the default options will only
   * cause it to be deepmerged and not actually replace with empty fields
   * 
   * This is are the options used on the `express-rate-limit` npm package used on epxress. read more about [https://www.npmjs.com/package/express-rate-limit](https://www.npmjs.com/package/express-rate-limit)
   */
  requestRateLimitOptions?: RateLimitOptions;
};

/**
 * Defines the initial configs of the api to be loaded at startup when arkos.init() is called.
 */
export type ArkosConfig = {
  /** Message you would like to send, as Json and 200 response when
   * ```
   * GET /api
   * ```
   * ```json
   * {
   *   "message": "Welcome to YourAppName"
   * }
   * ```
   *
   * default message is:
   *
   * ```json
   * {
   *   "message": "Welcome to our Rest API generated by Arkos, find more about Arkos at www.arkosjs.com",
   * }
   * ```
   *  */
  welcomeMessage?: string;
  /**
   * Port where the application will run, can be set in 3 ways:
   *
   * 1. default is 8000
   * 2. PORT under environment variables (Lower precedence)
   * 3. this config option (Higher precedence)
   */
  port?: number;
  authentication?: ArkosConfigAuthenticationOptions;

  /** Allows to customize and toggle the built-in validation, by default it is set to `false`. If true is passed it will use validation with the default resolver set to `class-validator` if you intend to change the resolver to `zod` do the following:
   *
   *```ts
   * // src/app.ts
   * import arkos from 'arkos'
   *
   * arkos.init({
   *    validation: {
   *        resolver: "zod"
   *    }
   * })
   * ```
   */
  validation?:
    | ClassValidatorArkosConfigOptions
    | {
        resolver?: "zod";
        validationOptions?: Record<string, any>;
      };
  /**
   * Defines file upload configurations
   *
   * See [www.arkosjs.com/docs/core-concepts/file-upload#costum-configurations](https://www.arkosjs.com/docs/core-concepts/file-upload#costum-configurations)
   */
  fileUpload?: {
    /**
     * Defiens the base file upload directory, default is set to /uploads (on root directory)
     *
     * When setting up a path dir always now that root directory will be the starting reference.
     *
     * #### Example
     * passing `../my-arkos-uploaded-files`
     *
     * Will save uploaded files one level outside the root dir inside `my-arkos-uploaded-files`
     *
     * NB: You must be aware of permissions on your server to acess files outside your project directory.
     *
     */
    baseUploadDir?: string;
    /**
     * Changes the default `/api/uploads` base route for accessing file upload route.
     *
     * #### IMPORTANT
     * Changing this will not affect the `baseUploadDir` folder. You can
     * pass here `/api/files/my-user-files` and `baseUploadDir` be `/uploaded-files`.
     *
     */
    baseRoute?: string;
    /**
     * Defines options for `express.static(somePath, someOptions)`
     *
     * #### Default:
     *
     * ```ts
     *{
          maxAge: "1y",
          etag: true,
          lastModified: true,
          dotfiles: "ignore",
          fallthrough: true,
          index: false,
          cacheControl: true,
        }
     * ```
     * 
     * By passing your custom options have in mind that it
     * will be deepmerged with the default.
     * 
     * Visit [https://expressjs.com/en/4x/api.html#express.static](https://expressjs.com/en/4x/api.html#express.static) for more understanding.
     * 
     */
    expressStaticOptions?: Parameters<typeof express.static>[1];
    /**
     * Defines upload restrictions for each file type: image, video, document or other.
     *
     * #### Important:
     * Passing an object without overriding everything will only cause it
     * to be deepmerged with the default options.
     *
     * #### Default:
     * ```ts
     * {
     *   image: {
     *     maxCount: 30,
     *     maxSize: 1024 * 1024 * 15, // 15 MB
     *     supportedFilesRegex: /jpeg|jpg|png|gif|webp|svg|bmp|tiff|heif|heic|ico|jfif|raw|cr2|nef|orf|sr2|arw|dng|pef|raf|rw2|psd|ai|eps|xcf|jxr|wdp|hdp|jp2|j2k|jpf|jpx|jpm|mj2|avif/
     *   },
     *   video: {
     *     maxCount: 10,
     *     maxSize: 1024 * 1024 * 5096, // 5 GB
     *     supportedFilesRegex: /mp4|avi|mov|mkv|flv|wmv|webm|mpg|mpeg|3gp|m4v|ts|rm|rmvb|vob|ogv|dv|qt|asf|m2ts|mts|divx|f4v|swf|mxf|roq|nsv|mvb|svi|mpe|m2v|mp2|mpv|h264|h265|hevc/
     *   },
     *   document: {
     *     maxCount: 30,
     *     maxSize: 1024 * 1024 * 50, // 50 MB
     *     supportedFilesRegex: /pdf|doc|docx|xls|xlsx|ppt|pptx|odt|ods|odg|odp|txt|rtf|csv|epub|md|tex|pages|numbers|key|xml|json|yaml|yml|ini|cfg|conf|log|html|htm|xhtml|djvu|mobi|azw|azw3|fb2|lit|ps|wpd|wps|dot|dotx|xlt|xltx|pot|potx|oft|one|onetoc2|opf|oxps|hwp/
     *   },
     *   other: {
     *     maxCount: 10,
     *     maxSize: 1024 * 1024 * 5096, // 5 GB
     *     supportedFilesRegex: // regex any file
     *   }
     * }
     * ```
     */
    uploadRestrictions?: {
      image?: {
        maxCount?: number;
        maxSize?: number;
        supportedFilesRegex?: RegExp;
      };
      video?: {
        maxCount?: number;
        maxSize?: number;
        supportedFilesRegex?: RegExp;
      };
      document?: {
        maxCount?: number;
        maxSize?: number;
        supportedFilesRegex?: RegExp;
      };
      other?: {
        maxCount?: number;
        maxSize?: number;
        supportedFilesRegex?: RegExp;
      };
    };
    globaRequestRateLimitOptions?: RateLimitOptions;
  };
};
