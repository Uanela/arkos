import { IncomingMessage, Server, ServerResponse } from "http";
import AppError from "./modules/error-handler/utils/app-error";
import { Express } from "express";
import { bootstrap } from "./app";
import { ArkosConfig } from "./types/arkos-config";
import deepmerge from "./utils/helpers/deepmerge.helper";
import http from "http";

process.on("uncaughtException", (err) => {
  if (err.message.includes("EPIPE")) return;

  console.error("\nUNCAUGHT EXCEPTION! SHUTTING DOWN...\n");
  console.error(err.name, err.message);
  console.error(err);
  process.exit(1);
});

let server: Server<typeof IncomingMessage, typeof ServerResponse>;
let _app: Express;

let _arkosConfig: ArkosConfig & { available?: boolean } = {
  welcomeMessage:
    "Welcome to our RESTful API generated by Arkos, find out more about Arkos at www.arkosjs.com",
  port: Number(process.env.CLI_PORT) || Number(process.env.PORT) || 8000,
  host: process.env.CLI_HOST || process.env.HOST || "localhost",
  fileUpload: {
    baseUploadDir: "uploads",
    baseRoute: "/api/uploads",
  },
  available: false,
};

/**
 * Initializes the application server.
 *
 * This function starts the server by listening on a specified port.
 * The port is determined by the following order of precedence:
 * 1. The `port` argument passed to the function.
 * 2. Defaults to `8000` if neither is provided.
 *
 * @param {ArkosConfig} arkosConfig - initial configs for the api ( authentication, port).
 * @returns {Promise<Express>} This function returns the Express App after all middlewares configurations.
 * You can prevent it from listen py passing port as undefined
 *
 */
async function initApp(arkosConfig: ArkosConfig = {}): Promise<Express> {
  _arkosConfig.available = true;
  _arkosConfig = deepmerge(_arkosConfig, arkosConfig);

  const port =
    process.env.CLI_PORT || arkosConfig.port || process.env.PORT || undefined;

  _app = await bootstrap(_arkosConfig);

  if (port) {
    server = http.createServer(_app);

    if (_arkosConfig?.configureServer)
      await _arkosConfig.configureServer(server);

    server.listen(Number(port), _arkosConfig.host!, () => {
      const time = new Date().toTimeString().split(" ")[0];
      console.info(
        `[\x1b[32mREADY\x1b[0m] \x1b[90m${time}\x1b[0m server waiting on http://${_arkosConfig.host || "localhost"}:${port}`
      );
    });
  }

  return _app;
}

process.on("unhandledRejection", (err: AppError) => {
  console.error("UNHANDLED REJECTION! SHUTTING DOWN...");
  console.error(err.name, err.message);
  console.error(err);
  server?.close(() => {
    process.exit(1);
  });
});

/**
 * Terminates the current running express application, server and process.
 *
 * @returns {void}
 */
export function terminateApplicationRunningProcessAndServer(): void {
  server?.close(() => {
    process.exit(1);
  });
}

/**
 * Gives access to the underlying current configurations being used by **Arkos** by default and also passed through `arkos.init()`
 *
 * @returns {ArkosConfig}
 */
export function getArkosConfig(): ArkosConfig {
  return _arkosConfig;
}

export function getExpressApp() {
  return _app;
}

export { server, initApp };
