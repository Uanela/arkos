import { IncomingMessage, Server, ServerResponse } from "http";
import AppError from "./modules/error-handler/utils/app-error";
import { Express } from "express";
import { bootstrap } from "./app";
import { ArkosConfig } from "./types/arkos-config";
import deepmerge from "./utils/helpers/deepmerge.helper";

process.on("uncaughtException", (err) => {
  console.error("UNCAUGHT EXCEPTION! SHUTTING DOWN...");
  console.error(err.name, err.message);
  console.error(err);
  process.exit(1);
});

let server: Server<typeof IncomingMessage, typeof ServerResponse>;
let _app: Express;

let _arkosConfig: ArkosConfig = {
  welcomeMessage:
    "Welcome to our RESTful API generated by Arkos, find out more about Arkos at www.arkosjs.com",
  port: 8000,
  fileUpload: {
    baseUploadDir: "uploads",
    baseRoute: "/api/uploads",
  },
};

/**
 * Initializes the application server.
 *
 * This function starts the server by listening on a specified port.
 * The port is determined by the following order of precedence:
 * 1. The `port` argument passed to the function.
 * 2. Defaults to `8000` if neither is provided.
 *
 * @param {ArkosConfig} arkosConfig - initial configs for the api ( authentication, port).
 * @returns {Promise<Express>} This function returns the Express App after all middlewares configurations.
 * You can prevent it from listen py passing port as undefined
 *
 */
async function initApp(arkosConfig: ArkosConfig = {}): Promise<Express> {
  _arkosConfig = deepmerge(_arkosConfig, arkosConfig);

  const port = _arkosConfig.port;
  _app = await bootstrap(_arkosConfig);

  if (port)
    server = _app.listen(
      arkosConfig?.host ? [port, arkosConfig?.host!] : port,
      () => {
        const time = new Date().toTimeString().split(" ")[0];
        console.info(
          `[\x1b[32mREADY\x1b[0m] \x1b[90m${time}\x1b[0m App running on port \x1b[33m${port}\x1b[0m, server waiting on http://localhost:${port}`
        );

        if (!!process.env.NODE_ENV)
          console.log(`${`Environment: ${process.env.NODE_ENV}`}`);
      }
    );

  return _app;
}

process.on("unhandledRejection", (err: AppError) => {
  console.error("UNHANDLED REJECTION! SHUTTING DOWN...");
  console.error(err.name, err.message);
  server.close(() => {
    process.exit(1);
  });
});

export function getArkosConfig() {
  return _arkosConfig;
}

export function getExpressApp() {
  return _app;
}

export { server, initApp };
