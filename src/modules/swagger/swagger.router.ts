import { Router } from "express";
import swaggerUi from "swagger-ui-express";
import swaggerJsdoc from "swagger-jsdoc";
import { ArkosConfig } from "../../types/arkos-config";
import deepmerge from "../../utils/helpers/deepmerge.helper";

const swaggerRouter = Router();

// Helper function to generate schemas based on mode
function generateSchemasByMode(swaggerConfig: ArkosConfig["swagger"]) {
  const schemas: Record<string, any> = {};

  switch (swaggerConfig!.mode) {
    case "prisma":
      // In a real implementation, you'd generate schemas from Prisma models
      // This would require additional logic to parse Prisma schema files
      break;

    case "class-validator":
      // Generate schemas from class-validator decorators
      // This would require reflection or build-time generation
      break;

    case "zod":
      // Generate schemas from Zod definitions
      // This could be done through custom transformations
      break;

    case "json-schema":
    default:
      // Use manually defined JSON schemas
      // This is the default behavior with JSDoc comments
      break;
  }

  return schemas;
}

export function getSwaggerRouter(arkosConfig: ArkosConfig): Router {
  // Default swagger configuration
  const defaultSwaggerConfig: ArkosConfig["swagger"] = {
    endpoint: "/docs",
    mode: "json-schema",
    options: {
      definition: {
        openapi: "3.0.0",
        info: {
          title: "API Generated By Arkos.js",
          version: "1.0.0",
          description:
            "This API was automatically generated by Arkos.js read more about at www.arkosjs.com",
        },
        servers: [
          {
            url: `http://${arkosConfig.host}:${arkosConfig.port}`,
            description: "Local server",
          },
        ],
        components: {
          schemas: {},
          securitySchemes: {
            BearerAuth: {
              type: "http",
              scheme: "bearer",
              bearerFormat: "JWT",
            },
            ApiKeyAuth: {
              type: "apiKey",
              in: "header",
              name: "X-API-Key",
            },
          },
        },
        security: [],
      },
      apis: [
        "./src/routers/*.router.{ts,js}",
        "./src/modules/**/*.router.{ts,js}",
      ],
      swaggerUiOptions: {
        explorer: true,
        customCss: `
          .swagger-ui .topbar { display: none; }
          .swagger-ui .info { margin: 20px 0; }
        `,
        swaggerOptions: {
          filter: true,
          displayRequestDuration: true,
          showExtensions: true,
          showCommonExtensions: true,
        },
      },
      deepLinking: true,
      tryItOutEnabled: true,
      persistAuthorization: false,
    },
  };

  // Merge default config with user config
  const swaggerConfigs = deepmerge(
    defaultSwaggerConfig,
    arkosConfig.swagger || {}
  );

  // Generate additional schemas based on mode
  const modeSchemas = generateSchemasByMode(swaggerConfigs);

  // Merge mode-generated schemas with existing schemas
  if (swaggerConfigs.options.definition.components?.schemas) {
    swaggerConfigs.options.definition.components.schemas = {
      ...swaggerConfigs.options.definition.components.schemas,
      ...modeSchemas,
    };
  }

  // Generate OpenAPI specification using swagger-jsdoc
  const swaggerSpecification = swaggerJsdoc({
    definition: swaggerConfigs.options
      .definition as swaggerJsdoc.SwaggerDefinition,
    apis: swaggerConfigs.options.apis || [],
  });

  // Setup Swagger UI options
  const swaggerUiOptions = {
    explorer: swaggerConfigs.options.swaggerUiOptions?.explorer ?? true,
    customCss: swaggerConfigs.options.swaggerUiOptions?.customCss,
    customSiteTitle:
      swaggerConfigs.options.swaggerUiOptions?.customSiteTitle ||
      "API Documentation",
    customfavIcon: swaggerConfigs.options.swaggerUiOptions?.customfavIcon,
    swaggerOptions: {
      filter:
        swaggerConfigs.options.swaggerUiOptions?.swaggerOptions?.filter ?? true,
      displayRequestDuration:
        swaggerConfigs.options.swaggerUiOptions?.swaggerOptions
          ?.displayRequestDuration ?? true,
      deepLinking: swaggerConfigs.options.deepLinking ?? true,
      tryItOutEnabled: swaggerConfigs.options.tryItOutEnabled ?? true,
      persistAuthorization:
        swaggerConfigs.options.persistAuthorization ?? false,
      showExtensions:
        swaggerConfigs.options.swaggerUiOptions?.swaggerOptions
          ?.showExtensions ?? true,
      showCommonExtensions:
        swaggerConfigs.options.swaggerUiOptions?.swaggerOptions
          ?.showCommonExtensions ?? true,
      ...swaggerConfigs.options.swaggerUiOptions?.swaggerOptions,
    },
  };

  // Serve Swagger UI static assets
  swaggerRouter.use(swaggerConfigs.endpoint!, swaggerUi.serve);

  // Serve Swagger documentation
  swaggerRouter.get(
    swaggerConfigs.endpoint!,
    swaggerUi.setup(swaggerSpecification, swaggerUiOptions)
  );

  // Serve raw OpenAPI spec as JSON
  swaggerRouter.get(`${swaggerConfigs.endpoint}/json`, (req, res) => {
    res.setHeader("Content-Type", "application/json");
    res.json(swaggerSpecification);
  });

  // Serve raw OpenAPI spec as YAML (optional)
  swaggerRouter.get(`${swaggerConfigs.endpoint}/yaml`, (req, res) => {
    const yaml = require("js-yaml");
    res.setHeader("Content-Type", "text/yaml");
    res.send(yaml.dump(swaggerSpecification));
  });

  // Health check endpoint for Swagger itself
  swaggerRouter.get(`${swaggerConfigs.endpoint}/health`, (req, res) => {
    res.json({
      status: "ok",
      swagger: {
        version: swaggerConfigs.options.definition.openapi,
        title: swaggerConfigs.options.definition.info?.title,
        endpoint: swaggerConfigs.endpoint,
        mode: swaggerConfigs.mode,
      },
    });
  });

  return swaggerRouter;
}
