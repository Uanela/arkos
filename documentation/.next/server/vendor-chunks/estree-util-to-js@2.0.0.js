"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/estree-util-to-js@2.0.0";
exports.ids = ["vendor-chunks/estree-util-to-js@2.0.0"];
exports.modules = {

/***/ "(rsc)/../node_modules/.pnpm/estree-util-to-js@2.0.0/node_modules/estree-util-to-js/lib/index.js":
/*!*************************************************************************************************!*\
  !*** ../node_modules/.pnpm/estree-util-to-js@2.0.0/node_modules/estree-util-to-js/lib/index.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toJs: () => (/* binding */ toJs)\n/* harmony export */ });\n/* harmony import */ var astring__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! astring */ \"(rsc)/../node_modules/.pnpm/astring@1.9.0/node_modules/astring/dist/astring.mjs\");\n/**\n * @typedef {import('astring').State} State\n * @typedef {import('estree-jsx').Node} Nodes\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {typeof import('source-map').SourceMapGenerator} SourceMapGenerator\n * @typedef {import('source-map').RawSourceMap} Map\n */\n\n/**\n * @typedef {Record<Nodes['type'], Handler>} Generator\n *\n * @callback Handler\n *  Handle a particular node.\n * @param {Generator} this\n *   `astring` generator.\n * @param {any} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef {Partial<import('astring').Generator>} Handlers\n */\n\n/**\n * @typedef {OptionsWithMaybeMapGenerator} Options\n *   Configuration.\n *\n * @typedef OptionsFieldsBase\n *   Base shared option fields.\n * @property {Handlers | null | undefined} [handlers]\n *   Object mapping node types to functions handling the corresponding nodes.\n *\n * @typedef OptionsFieldsWithoutSourceMapGenerator\n *   Extra option fields where there’s definitely no source map generator.\n * @property {null | undefined} [SourceMapGenerator]\n *   Generate a source map by passing a `SourceMapGenerator` from `source-map`\n *   in; this works if there is positional info on nodes.\n * @property {null | undefined} [filePath]\n *   Path to input file; only used in source map.\n *\n * @typedef OptionsFieldsWithSourceMapGenerator\n *   Extra option fields where there’s definitely a source map generator.\n * @property {SourceMapGenerator} SourceMapGenerator\n *   Generate a source map by passing a `SourceMapGenerator` from `source-map`\n *   in; this works if there is positional info on nodes.\n * @property {string | null | undefined} [filePath]\n *   Path to input file; only used in source map.\n *\n * @typedef OptionsFieldsMaybeSourceMapGenerator\n *   Extra option fields where there may or may not be a source map generator.\n * @property {SourceMapGenerator | null | undefined} [SourceMapGenerator]\n *   Generate a source map by passing a `SourceMapGenerator` from `source-map`\n *   in; this works if there is positional info on nodes.\n * @property {string | null | undefined} [filePath]\n *   Path to input file; only used in source map.\n *\n * @typedef {OptionsFieldsBase & OptionsFieldsWithoutSourceMapGenerator} OptionsWithoutSourceMapGenerator\n *   Options where there’s definitely no source map generator.\n * @typedef {OptionsFieldsBase & OptionsFieldsWithSourceMapGenerator} OptionsWithSourceMapGenerator\n *   Options where there’s definitely a source map generator.\n * @typedef {OptionsFieldsBase & OptionsFieldsMaybeSourceMapGenerator} OptionsWithMaybeMapGenerator\n *   Options where there may or may not be a source map generator.\n *\n * @typedef {ResultWithMaybeSourceMapGenerator} Result\n *   Result.\n *\n * @typedef ResultFieldsBase\n *   Base shared result fields.\n * @property {string} value\n *   Serialized JavaScript.\n *\n * @typedef ResultFieldsWithoutSourceMapGenerator\n *   Extra result fields where there’s definitely no source map generator.\n * @property {undefined} map\n *   Source map as (parsed) JSON, if `SourceMapGenerator` is passed.\n *\n * @typedef ResultFieldsWithSourceMapGenerator\n *   Extra result fields where there’s definitely a source map generator.\n * @property {Map} map\n *   Source map as (parsed) JSON, if `SourceMapGenerator` is not passed.\n *\n * @typedef ResultFieldsMaybeSourceMapGenerator\n *   Extra result fields where there may or may not be a source map generator.\n * @property {Map | undefined} map\n *   Source map as (parsed) JSON, if `SourceMapGenerator` might be passed.\n *\n * @typedef {ResultFieldsBase & ResultFieldsWithoutSourceMapGenerator} ResultWithoutSourceMapGenerator\n *   Result where there’s definitely no source map generator.\n * @typedef {ResultFieldsBase & ResultFieldsWithSourceMapGenerator} ResultWithSourceMapGenerator\n *   Result where there’s definitely a source map generator.\n * @typedef {ResultFieldsBase & ResultFieldsMaybeSourceMapGenerator} ResultWithMaybeSourceMapGenerator\n *   Result where there may or may not be a source map generator.\n */\n\n\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Serialize an estree as JavaScript.\n *\n * @overload\n * @param {Program} tree\n * @param {OptionsWithSourceMapGenerator} options\n * @returns {ResultWithSourceMapGenerator}\n *\n * @overload\n * @param {Program} tree\n * @param {OptionsWithMaybeMapGenerator} options\n * @returns {ResultWithMaybeSourceMapGenerator}\n *\n * @overload\n * @param {Program} tree\n * @param {OptionsWithoutSourceMapGenerator | null | undefined} [options]\n * @returns {ResultWithoutSourceMapGenerator}\n *\n * @param {Program} tree\n *   Estree (esast).\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Result}\n *   Result, optionally with source map.\n */\nfunction toJs(tree, options) {\n  const {SourceMapGenerator, filePath, handlers} = options || emptyOptions\n  const sourceMap = SourceMapGenerator\n    ? new SourceMapGenerator({file: filePath || '<unknown>.js'})\n    : undefined\n\n  const value = (0,astring__WEBPACK_IMPORTED_MODULE_0__.generate)(\n    tree,\n    // @ts-expect-error: `sourceMap` can be undefined, `astring` types are buggy.\n    {\n      comments: true,\n      generator: {...astring__WEBPACK_IMPORTED_MODULE_0__.GENERATOR, ...handlers},\n      sourceMap: sourceMap || undefined\n    }\n  )\n  const map = sourceMap ? sourceMap.toJSON() : undefined\n\n  return {value, map}\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2VzdHJlZS11dGlsLXRvLWpzQDIuMC4wL25vZGVfbW9kdWxlcy9lc3RyZWUtdXRpbC10by1qcy9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBLGFBQWEseUJBQXlCO0FBQ3RDLGFBQWEsMkJBQTJCO0FBQ3hDLGFBQWEsOEJBQThCO0FBQzNDLGFBQWEsZ0RBQWdEO0FBQzdELGFBQWEsbUNBQW1DO0FBQ2hEOztBQUVBO0FBQ0EsYUFBYSxnQ0FBZ0M7QUFDN0M7QUFDQTtBQUNBO0FBQ0EsV0FBVyxXQUFXO0FBQ3RCO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhLHNDQUFzQztBQUNuRDs7QUFFQTtBQUNBLGFBQWEsOEJBQThCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyw2QkFBNkI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGtCQUFrQjtBQUNoQztBQUNBLFNBQVM7QUFDVCxjQUFjLGtCQUFrQjtBQUNoQyx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0EsY0FBYyxvQkFBb0I7QUFDbEM7QUFDQSxTQUFTO0FBQ1QsY0FBYywyQkFBMkI7QUFDekMseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLGNBQWMsdUNBQXVDO0FBQ3JEO0FBQ0EsU0FBUztBQUNULGNBQWMsMkJBQTJCO0FBQ3pDLHlCQUF5QjtBQUN6QjtBQUNBLGFBQWEsNERBQTREO0FBQ3pFO0FBQ0EsYUFBYSx5REFBeUQ7QUFDdEU7QUFDQSxhQUFhLDBEQUEwRDtBQUN2RTtBQUNBO0FBQ0EsYUFBYSxtQ0FBbUM7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFdBQVc7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLEtBQUs7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGlCQUFpQjtBQUMvQjtBQUNBO0FBQ0EsYUFBYSwwREFBMEQ7QUFDdkU7QUFDQSxhQUFhLHVEQUF1RDtBQUNwRTtBQUNBLGFBQWEsd0RBQXdEO0FBQ3JFO0FBQ0E7O0FBRTJDOztBQUUzQyxXQUFXLFNBQVM7QUFDcEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVywrQkFBK0I7QUFDMUMsYUFBYTtBQUNiO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyw4QkFBOEI7QUFDekMsYUFBYTtBQUNiO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxxREFBcUQ7QUFDaEUsYUFBYTtBQUNiO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyw0QkFBNEI7QUFDdkM7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNPO0FBQ1AsU0FBUyx3Q0FBd0M7QUFDakQ7QUFDQSw4QkFBOEIsaUNBQWlDO0FBQy9EOztBQUVBLGdCQUFnQixpREFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixHQUFHLDhDQUFTLGNBQWM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsVUFBVTtBQUNWIiwic291cmNlcyI6WyIvVXNlcnMvdWFuZWxhX2NvbW8vRG9jdW1lbnRzL2RldmVsb3BtZW50L25vZGVqcy9hcmtvcy9ub2RlX21vZHVsZXMvLnBucG0vZXN0cmVlLXV0aWwtdG8tanNAMi4wLjAvbm9kZV9tb2R1bGVzL2VzdHJlZS11dGlsLXRvLWpzL2xpYi9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2FzdHJpbmcnKS5TdGF0ZX0gU3RhdGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5Ob2RlfSBOb2Rlc1xuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLlByb2dyYW19IFByb2dyYW1cbiAqIEB0eXBlZGVmIHt0eXBlb2YgaW1wb3J0KCdzb3VyY2UtbWFwJykuU291cmNlTWFwR2VuZXJhdG9yfSBTb3VyY2VNYXBHZW5lcmF0b3JcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3NvdXJjZS1tYXAnKS5SYXdTb3VyY2VNYXB9IE1hcFxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge1JlY29yZDxOb2Rlc1sndHlwZSddLCBIYW5kbGVyPn0gR2VuZXJhdG9yXG4gKlxuICogQGNhbGxiYWNrIEhhbmRsZXJcbiAqICBIYW5kbGUgYSBwYXJ0aWN1bGFyIG5vZGUuXG4gKiBAcGFyYW0ge0dlbmVyYXRvcn0gdGhpc1xuICogICBgYXN0cmluZ2AgZ2VuZXJhdG9yLlxuICogQHBhcmFtIHthbnl9IG5vZGVcbiAqICAgTm9kZSB0byBzZXJpYWxpemUuXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogICBOb3RoaW5nLlxuICpcbiAqIEB0eXBlZGVmIHtQYXJ0aWFsPGltcG9ydCgnYXN0cmluZycpLkdlbmVyYXRvcj59IEhhbmRsZXJzXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T3B0aW9uc1dpdGhNYXliZU1hcEdlbmVyYXRvcn0gT3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uLlxuICpcbiAqIEB0eXBlZGVmIE9wdGlvbnNGaWVsZHNCYXNlXG4gKiAgIEJhc2Ugc2hhcmVkIG9wdGlvbiBmaWVsZHMuXG4gKiBAcHJvcGVydHkge0hhbmRsZXJzIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2hhbmRsZXJzXVxuICogICBPYmplY3QgbWFwcGluZyBub2RlIHR5cGVzIHRvIGZ1bmN0aW9ucyBoYW5kbGluZyB0aGUgY29ycmVzcG9uZGluZyBub2Rlcy5cbiAqXG4gKiBAdHlwZWRlZiBPcHRpb25zRmllbGRzV2l0aG91dFNvdXJjZU1hcEdlbmVyYXRvclxuICogICBFeHRyYSBvcHRpb24gZmllbGRzIHdoZXJlIHRoZXJl4oCZcyBkZWZpbml0ZWx5IG5vIHNvdXJjZSBtYXAgZ2VuZXJhdG9yLlxuICogQHByb3BlcnR5IHtudWxsIHwgdW5kZWZpbmVkfSBbU291cmNlTWFwR2VuZXJhdG9yXVxuICogICBHZW5lcmF0ZSBhIHNvdXJjZSBtYXAgYnkgcGFzc2luZyBhIGBTb3VyY2VNYXBHZW5lcmF0b3JgIGZyb20gYHNvdXJjZS1tYXBgXG4gKiAgIGluOyB0aGlzIHdvcmtzIGlmIHRoZXJlIGlzIHBvc2l0aW9uYWwgaW5mbyBvbiBub2Rlcy5cbiAqIEBwcm9wZXJ0eSB7bnVsbCB8IHVuZGVmaW5lZH0gW2ZpbGVQYXRoXVxuICogICBQYXRoIHRvIGlucHV0IGZpbGU7IG9ubHkgdXNlZCBpbiBzb3VyY2UgbWFwLlxuICpcbiAqIEB0eXBlZGVmIE9wdGlvbnNGaWVsZHNXaXRoU291cmNlTWFwR2VuZXJhdG9yXG4gKiAgIEV4dHJhIG9wdGlvbiBmaWVsZHMgd2hlcmUgdGhlcmXigJlzIGRlZmluaXRlbHkgYSBzb3VyY2UgbWFwIGdlbmVyYXRvci5cbiAqIEBwcm9wZXJ0eSB7U291cmNlTWFwR2VuZXJhdG9yfSBTb3VyY2VNYXBHZW5lcmF0b3JcbiAqICAgR2VuZXJhdGUgYSBzb3VyY2UgbWFwIGJ5IHBhc3NpbmcgYSBgU291cmNlTWFwR2VuZXJhdG9yYCBmcm9tIGBzb3VyY2UtbWFwYFxuICogICBpbjsgdGhpcyB3b3JrcyBpZiB0aGVyZSBpcyBwb3NpdGlvbmFsIGluZm8gb24gbm9kZXMuXG4gKiBAcHJvcGVydHkge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtmaWxlUGF0aF1cbiAqICAgUGF0aCB0byBpbnB1dCBmaWxlOyBvbmx5IHVzZWQgaW4gc291cmNlIG1hcC5cbiAqXG4gKiBAdHlwZWRlZiBPcHRpb25zRmllbGRzTWF5YmVTb3VyY2VNYXBHZW5lcmF0b3JcbiAqICAgRXh0cmEgb3B0aW9uIGZpZWxkcyB3aGVyZSB0aGVyZSBtYXkgb3IgbWF5IG5vdCBiZSBhIHNvdXJjZSBtYXAgZ2VuZXJhdG9yLlxuICogQHByb3BlcnR5IHtTb3VyY2VNYXBHZW5lcmF0b3IgfCBudWxsIHwgdW5kZWZpbmVkfSBbU291cmNlTWFwR2VuZXJhdG9yXVxuICogICBHZW5lcmF0ZSBhIHNvdXJjZSBtYXAgYnkgcGFzc2luZyBhIGBTb3VyY2VNYXBHZW5lcmF0b3JgIGZyb20gYHNvdXJjZS1tYXBgXG4gKiAgIGluOyB0aGlzIHdvcmtzIGlmIHRoZXJlIGlzIHBvc2l0aW9uYWwgaW5mbyBvbiBub2Rlcy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2ZpbGVQYXRoXVxuICogICBQYXRoIHRvIGlucHV0IGZpbGU7IG9ubHkgdXNlZCBpbiBzb3VyY2UgbWFwLlxuICpcbiAqIEB0eXBlZGVmIHtPcHRpb25zRmllbGRzQmFzZSAmIE9wdGlvbnNGaWVsZHNXaXRob3V0U291cmNlTWFwR2VuZXJhdG9yfSBPcHRpb25zV2l0aG91dFNvdXJjZU1hcEdlbmVyYXRvclxuICogICBPcHRpb25zIHdoZXJlIHRoZXJl4oCZcyBkZWZpbml0ZWx5IG5vIHNvdXJjZSBtYXAgZ2VuZXJhdG9yLlxuICogQHR5cGVkZWYge09wdGlvbnNGaWVsZHNCYXNlICYgT3B0aW9uc0ZpZWxkc1dpdGhTb3VyY2VNYXBHZW5lcmF0b3J9IE9wdGlvbnNXaXRoU291cmNlTWFwR2VuZXJhdG9yXG4gKiAgIE9wdGlvbnMgd2hlcmUgdGhlcmXigJlzIGRlZmluaXRlbHkgYSBzb3VyY2UgbWFwIGdlbmVyYXRvci5cbiAqIEB0eXBlZGVmIHtPcHRpb25zRmllbGRzQmFzZSAmIE9wdGlvbnNGaWVsZHNNYXliZVNvdXJjZU1hcEdlbmVyYXRvcn0gT3B0aW9uc1dpdGhNYXliZU1hcEdlbmVyYXRvclxuICogICBPcHRpb25zIHdoZXJlIHRoZXJlIG1heSBvciBtYXkgbm90IGJlIGEgc291cmNlIG1hcCBnZW5lcmF0b3IuXG4gKlxuICogQHR5cGVkZWYge1Jlc3VsdFdpdGhNYXliZVNvdXJjZU1hcEdlbmVyYXRvcn0gUmVzdWx0XG4gKiAgIFJlc3VsdC5cbiAqXG4gKiBAdHlwZWRlZiBSZXN1bHRGaWVsZHNCYXNlXG4gKiAgIEJhc2Ugc2hhcmVkIHJlc3VsdCBmaWVsZHMuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdmFsdWVcbiAqICAgU2VyaWFsaXplZCBKYXZhU2NyaXB0LlxuICpcbiAqIEB0eXBlZGVmIFJlc3VsdEZpZWxkc1dpdGhvdXRTb3VyY2VNYXBHZW5lcmF0b3JcbiAqICAgRXh0cmEgcmVzdWx0IGZpZWxkcyB3aGVyZSB0aGVyZeKAmXMgZGVmaW5pdGVseSBubyBzb3VyY2UgbWFwIGdlbmVyYXRvci5cbiAqIEBwcm9wZXJ0eSB7dW5kZWZpbmVkfSBtYXBcbiAqICAgU291cmNlIG1hcCBhcyAocGFyc2VkKSBKU09OLCBpZiBgU291cmNlTWFwR2VuZXJhdG9yYCBpcyBwYXNzZWQuXG4gKlxuICogQHR5cGVkZWYgUmVzdWx0RmllbGRzV2l0aFNvdXJjZU1hcEdlbmVyYXRvclxuICogICBFeHRyYSByZXN1bHQgZmllbGRzIHdoZXJlIHRoZXJl4oCZcyBkZWZpbml0ZWx5IGEgc291cmNlIG1hcCBnZW5lcmF0b3IuXG4gKiBAcHJvcGVydHkge01hcH0gbWFwXG4gKiAgIFNvdXJjZSBtYXAgYXMgKHBhcnNlZCkgSlNPTiwgaWYgYFNvdXJjZU1hcEdlbmVyYXRvcmAgaXMgbm90IHBhc3NlZC5cbiAqXG4gKiBAdHlwZWRlZiBSZXN1bHRGaWVsZHNNYXliZVNvdXJjZU1hcEdlbmVyYXRvclxuICogICBFeHRyYSByZXN1bHQgZmllbGRzIHdoZXJlIHRoZXJlIG1heSBvciBtYXkgbm90IGJlIGEgc291cmNlIG1hcCBnZW5lcmF0b3IuXG4gKiBAcHJvcGVydHkge01hcCB8IHVuZGVmaW5lZH0gbWFwXG4gKiAgIFNvdXJjZSBtYXAgYXMgKHBhcnNlZCkgSlNPTiwgaWYgYFNvdXJjZU1hcEdlbmVyYXRvcmAgbWlnaHQgYmUgcGFzc2VkLlxuICpcbiAqIEB0eXBlZGVmIHtSZXN1bHRGaWVsZHNCYXNlICYgUmVzdWx0RmllbGRzV2l0aG91dFNvdXJjZU1hcEdlbmVyYXRvcn0gUmVzdWx0V2l0aG91dFNvdXJjZU1hcEdlbmVyYXRvclxuICogICBSZXN1bHQgd2hlcmUgdGhlcmXigJlzIGRlZmluaXRlbHkgbm8gc291cmNlIG1hcCBnZW5lcmF0b3IuXG4gKiBAdHlwZWRlZiB7UmVzdWx0RmllbGRzQmFzZSAmIFJlc3VsdEZpZWxkc1dpdGhTb3VyY2VNYXBHZW5lcmF0b3J9IFJlc3VsdFdpdGhTb3VyY2VNYXBHZW5lcmF0b3JcbiAqICAgUmVzdWx0IHdoZXJlIHRoZXJl4oCZcyBkZWZpbml0ZWx5IGEgc291cmNlIG1hcCBnZW5lcmF0b3IuXG4gKiBAdHlwZWRlZiB7UmVzdWx0RmllbGRzQmFzZSAmIFJlc3VsdEZpZWxkc01heWJlU291cmNlTWFwR2VuZXJhdG9yfSBSZXN1bHRXaXRoTWF5YmVTb3VyY2VNYXBHZW5lcmF0b3JcbiAqICAgUmVzdWx0IHdoZXJlIHRoZXJlIG1heSBvciBtYXkgbm90IGJlIGEgc291cmNlIG1hcCBnZW5lcmF0b3IuXG4gKi9cblxuaW1wb3J0IHtHRU5FUkFUT1IsIGdlbmVyYXRlfSBmcm9tICdhc3RyaW5nJ1xuXG4vKiogQHR5cGUge09wdGlvbnN9ICovXG5jb25zdCBlbXB0eU9wdGlvbnMgPSB7fVxuXG4vKipcbiAqIFNlcmlhbGl6ZSBhbiBlc3RyZWUgYXMgSmF2YVNjcmlwdC5cbiAqXG4gKiBAb3ZlcmxvYWRcbiAqIEBwYXJhbSB7UHJvZ3JhbX0gdHJlZVxuICogQHBhcmFtIHtPcHRpb25zV2l0aFNvdXJjZU1hcEdlbmVyYXRvcn0gb3B0aW9uc1xuICogQHJldHVybnMge1Jlc3VsdFdpdGhTb3VyY2VNYXBHZW5lcmF0b3J9XG4gKlxuICogQG92ZXJsb2FkXG4gKiBAcGFyYW0ge1Byb2dyYW19IHRyZWVcbiAqIEBwYXJhbSB7T3B0aW9uc1dpdGhNYXliZU1hcEdlbmVyYXRvcn0gb3B0aW9uc1xuICogQHJldHVybnMge1Jlc3VsdFdpdGhNYXliZVNvdXJjZU1hcEdlbmVyYXRvcn1cbiAqXG4gKiBAb3ZlcmxvYWRcbiAqIEBwYXJhbSB7UHJvZ3JhbX0gdHJlZVxuICogQHBhcmFtIHtPcHRpb25zV2l0aG91dFNvdXJjZU1hcEdlbmVyYXRvciB8IG51bGwgfCB1bmRlZmluZWR9IFtvcHRpb25zXVxuICogQHJldHVybnMge1Jlc3VsdFdpdGhvdXRTb3VyY2VNYXBHZW5lcmF0b3J9XG4gKlxuICogQHBhcmFtIHtQcm9ncmFtfSB0cmVlXG4gKiAgIEVzdHJlZSAoZXNhc3QpLlxuICogQHBhcmFtIHtPcHRpb25zIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gKiAgIENvbmZpZ3VyYXRpb24gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zIHtSZXN1bHR9XG4gKiAgIFJlc3VsdCwgb3B0aW9uYWxseSB3aXRoIHNvdXJjZSBtYXAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0pzKHRyZWUsIG9wdGlvbnMpIHtcbiAgY29uc3Qge1NvdXJjZU1hcEdlbmVyYXRvciwgZmlsZVBhdGgsIGhhbmRsZXJzfSA9IG9wdGlvbnMgfHwgZW1wdHlPcHRpb25zXG4gIGNvbnN0IHNvdXJjZU1hcCA9IFNvdXJjZU1hcEdlbmVyYXRvclxuICAgID8gbmV3IFNvdXJjZU1hcEdlbmVyYXRvcih7ZmlsZTogZmlsZVBhdGggfHwgJzx1bmtub3duPi5qcyd9KVxuICAgIDogdW5kZWZpbmVkXG5cbiAgY29uc3QgdmFsdWUgPSBnZW5lcmF0ZShcbiAgICB0cmVlLFxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGBzb3VyY2VNYXBgIGNhbiBiZSB1bmRlZmluZWQsIGBhc3RyaW5nYCB0eXBlcyBhcmUgYnVnZ3kuXG4gICAge1xuICAgICAgY29tbWVudHM6IHRydWUsXG4gICAgICBnZW5lcmF0b3I6IHsuLi5HRU5FUkFUT1IsIC4uLmhhbmRsZXJzfSxcbiAgICAgIHNvdXJjZU1hcDogc291cmNlTWFwIHx8IHVuZGVmaW5lZFxuICAgIH1cbiAgKVxuICBjb25zdCBtYXAgPSBzb3VyY2VNYXAgPyBzb3VyY2VNYXAudG9KU09OKCkgOiB1bmRlZmluZWRcblxuICByZXR1cm4ge3ZhbHVlLCBtYXB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/estree-util-to-js@2.0.0/node_modules/estree-util-to-js/lib/index.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/estree-util-to-js@2.0.0/node_modules/estree-util-to-js/lib/jsx.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/.pnpm/estree-util-to-js@2.0.0/node_modules/estree-util-to-js/lib/jsx.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   jsx: () => (/* binding */ jsx)\n/* harmony export */ });\n/**\n * @typedef {import('estree-jsx').JSXAttribute} JsxAttribute\n * @typedef {import('estree-jsx').JSXClosingElement} JsxClosingElement\n * @typedef {import('estree-jsx').JSXClosingFragment} JsxClosingFragment\n * @typedef {import('estree-jsx').JSXElement} JsxElement\n * @typedef {import('estree-jsx').JSXExpressionContainer} JsxExpressionContainer\n * @typedef {import('estree-jsx').JSXFragment} JsxFragment\n * @typedef {import('estree-jsx').JSXIdentifier} JsxIdentifier\n * @typedef {import('estree-jsx').JSXMemberExpression} JsxMemberExpression\n * @typedef {import('estree-jsx').JSXNamespacedName} JsxNamespacedName\n * @typedef {import('estree-jsx').JSXOpeningElement} JsxOpeningElement\n * @typedef {import('estree-jsx').JSXOpeningFragment} JsxOpeningFragment\n * @typedef {import('estree-jsx').JSXSpreadAttribute} JsxSpreadAttribute\n * @typedef {import('estree-jsx').JSXText} JsxText\n *\n * @typedef {import('./index.js').Generator} Generator\n * @typedef {import('./index.js').State} State\n */\n\nconst jsx = {\n  JSXAttribute: jsxAttribute,\n  JSXClosingElement: jsxClosingElement,\n  JSXClosingFragment: jsxClosingFragment,\n  JSXElement: jsxElement,\n  JSXEmptyExpression: jsxEmptyExpression,\n  JSXExpressionContainer: jsxExpressionContainer,\n  JSXFragment: jsxFragment,\n  JSXIdentifier: jsxIdentifier,\n  JSXMemberExpression: jsxMemberExpression,\n  JSXNamespacedName: jsxNamespacedName,\n  JSXOpeningElement: jsxOpeningElement,\n  JSXOpeningFragment: jsxOpeningFragment,\n  JSXSpreadAttribute: jsxSpreadAttribute,\n  JSXText: jsxText\n}\n\n/**\n * `attr`\n * `attr=\"something\"`\n * `attr={1}`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxAttribute} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxAttribute(node, state) {\n  this[node.name.type](node.name, state)\n\n  if (node.value !== null && node.value !== undefined) {\n    state.write('=')\n\n    // Encode double quotes in attribute values.\n    if (node.value.type === 'Literal') {\n      state.write(\n        '\"' + encodeJsx(String(node.value.value)).replace(/\"/g, '&quot;') + '\"',\n        node\n      )\n    } else {\n      this[node.value.type](node.value, state)\n    }\n  }\n}\n\n/**\n * `</div>`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxClosingElement} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxClosingElement(node, state) {\n  state.write('</')\n  this[node.name.type](node.name, state)\n  state.write('>')\n}\n\n/**\n * `</>`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxClosingFragment} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxClosingFragment(node, state) {\n  state.write('</>', node)\n}\n\n/**\n * `<div />`\n * `<div></div>`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxElement} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxElement(node, state) {\n  let index = -1\n\n  this[node.openingElement.type](node.openingElement, state)\n\n  if (node.children) {\n    while (++index < node.children.length) {\n      const child = node.children[index]\n\n      // Supported in types but not by Acorn.\n      /* c8 ignore next 3 */\n      if (child.type === 'JSXSpreadChild') {\n        throw new Error('JSX spread children are not supported')\n      }\n\n      this[child.type](child, state)\n    }\n  }\n\n  if (node.closingElement) {\n    this[node.closingElement.type](node.closingElement, state)\n  }\n}\n\n/**\n * `{}` (always in a `JSXExpressionContainer`, which does the curlies)\n *\n * @this {Generator}\n *   `astring` generator.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxEmptyExpression() {}\n\n/**\n * `{expression}`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxExpressionContainer} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxExpressionContainer(node, state) {\n  state.write('{')\n  this[node.expression.type](node.expression, state)\n  state.write('}')\n}\n\n/**\n * `<></>`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxFragment} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxFragment(node, state) {\n  let index = -1\n\n  this[node.openingFragment.type](node.openingFragment, state)\n\n  if (node.children) {\n    while (++index < node.children.length) {\n      const child = node.children[index]\n\n      // Supported in types but not by Acorn.\n      /* c8 ignore next 3 */\n      if (child.type === 'JSXSpreadChild') {\n        throw new Error('JSX spread children are not supported')\n      }\n\n      this[child.type](child, state)\n    }\n  }\n\n  this[node.closingFragment.type](node.closingFragment, state)\n}\n\n/**\n * `div`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxIdentifier} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxIdentifier(node, state) {\n  state.write(node.name, node)\n}\n\n/**\n * `member.expression`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxMemberExpression} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxMemberExpression(node, state) {\n  this[node.object.type](node.object, state)\n  state.write('.')\n  this[node.property.type](node.property, state)\n}\n\n/**\n * `ns:name`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxNamespacedName} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxNamespacedName(node, state) {\n  this[node.namespace.type](node.namespace, state)\n  state.write(':')\n  this[node.name.type](node.name, state)\n}\n\n/**\n * `<div>`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxOpeningElement} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxOpeningElement(node, state) {\n  let index = -1\n\n  state.write('<')\n  this[node.name.type](node.name, state)\n\n  if (node.attributes) {\n    while (++index < node.attributes.length) {\n      state.write(' ')\n      this[node.attributes[index].type](node.attributes[index], state)\n    }\n  }\n\n  state.write(node.selfClosing ? ' />' : '>')\n}\n\n/**\n * `<>`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxOpeningFragment} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxOpeningFragment(node, state) {\n  state.write('<>', node)\n}\n\n/**\n * `{...argument}`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxSpreadAttribute} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxSpreadAttribute(node, state) {\n  state.write('{')\n  // eslint-disable-next-line new-cap\n  this.SpreadElement(node, state)\n  state.write('}')\n}\n\n/**\n * `!`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxText} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */\nfunction jsxText(node, state) {\n  state.write(encodeJsx(node.value).replace(/[<>{}]/g, replaceJsxChar), node)\n}\n\n/**\n * Make sure that character references don’t pop up.\n *\n * For example, the text `&copy;` should stay that way, and not turn into `©`.\n * We could encode all `&` (easy but verbose) or look for actual valid\n * references (complex but cleanest output).\n * Looking for the 2nd character gives us a middle ground.\n * The `#` is for (decimal and hexadecimal) numeric references, the letters\n * are for the named references.\n *\n * @param {string} value\n *   Value to encode.\n * @returns {string}\n *   Encoded value.\n */\nfunction encodeJsx(value) {\n  return value.replace(/&(?=[#a-z])/gi, '&amp;')\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction replaceJsxChar($0) {\n  return $0 === '<'\n    ? '&lt;'\n    : $0 === '>'\n    ? '&gt;'\n    : $0 === '{'\n    ? '&#123;'\n    : '&#125;'\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/estree-util-to-js@2.0.0/node_modules/estree-util-to-js/lib/jsx.js\n");

/***/ })

};
;