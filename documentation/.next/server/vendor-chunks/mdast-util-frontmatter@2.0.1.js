"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mdast-util-frontmatter@2.0.1";
exports.ids = ["vendor-chunks/mdast-util-frontmatter@2.0.1"];
exports.modules = {

/***/ "(rsc)/../node_modules/.pnpm/mdast-util-frontmatter@2.0.1/node_modules/mdast-util-frontmatter/lib/index.js":
/*!***********************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mdast-util-frontmatter@2.0.1/node_modules/mdast-util-frontmatter/lib/index.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   frontmatterFromMarkdown: () => (/* binding */ frontmatterFromMarkdown),\n/* harmony export */   frontmatterToMarkdown: () => (/* binding */ frontmatterToMarkdown)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! devlop */ \"(rsc)/../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_extension_frontmatter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-extension-frontmatter */ \"(rsc)/../node_modules/.pnpm/micromark-extension-frontmatter@2.0.0/node_modules/micromark-extension-frontmatter/dev/lib/to-matters.js\");\n/* harmony import */ var escape_string_regexp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! escape-string-regexp */ \"(rsc)/../node_modules/.pnpm/escape-string-regexp@5.0.0/node_modules/escape-string-regexp/index.js\");\n/**\n * @typedef {import('mdast').Literal} Literal\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('micromark-extension-frontmatter').Info} Info\n * @typedef {import('micromark-extension-frontmatter').Matter} Matter\n * @typedef {import('micromark-extension-frontmatter').Options} Options\n */\n\n\n\n\n\n/**\n * Create an extension for `mdast-util-from-markdown`.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nfunction frontmatterFromMarkdown(options) {\n  const matters = (0,micromark_extension_frontmatter__WEBPACK_IMPORTED_MODULE_1__.toMatters)(options)\n  /** @type {FromMarkdownExtension['enter']} */\n  const enter = {}\n  /** @type {FromMarkdownExtension['exit']} */\n  const exit = {}\n  let index = -1\n\n  while (++index < matters.length) {\n    const matter = matters[index]\n    enter[matter.type] = opener(matter)\n    exit[matter.type] = close\n    exit[matter.type + 'Value'] = value\n  }\n\n  return {enter, exit}\n}\n\n/**\n * @param {Matter} matter\n * @returns {FromMarkdownHandle} enter\n */\nfunction opener(matter) {\n  return open\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function open(token) {\n    // @ts-expect-error: custom.\n    this.enter({type: matter.type, value: ''}, token)\n    this.buffer()\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction close(token) {\n  const data = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  ;(0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)('value' in node)\n  this.exit(token)\n  // Remove the initial and final eol.\n  node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction value(token) {\n  this.config.enter.data.call(this, token)\n  this.config.exit.data.call(this, token)\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown`.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nfunction frontmatterToMarkdown(options) {\n  /** @type {ToMarkdownExtension['unsafe']} */\n  const unsafe = []\n  /** @type {ToMarkdownExtension['handlers']} */\n  const handlers = {}\n  const matters = (0,micromark_extension_frontmatter__WEBPACK_IMPORTED_MODULE_1__.toMatters)(options)\n  let index = -1\n\n  while (++index < matters.length) {\n    const matter = matters[index]\n\n    // @ts-expect-error: this can add custom frontmatter nodes.\n    // Typing those is the responsibility of the end user.\n    handlers[matter.type] = handler(matter)\n\n    const open = fence(matter, 'open')\n\n    unsafe.push({\n      atBreak: true,\n      character: open.charAt(0),\n      after: (0,escape_string_regexp__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(open.charAt(1))\n    })\n  }\n\n  return {unsafe, handlers}\n}\n\n/**\n * Create a handle that can serialize a frontmatter node as markdown.\n *\n * @param {Matter} matter\n *   Structure.\n * @returns {(node: Literal) => string} enter\n *   Handler.\n */\nfunction handler(matter) {\n  const open = fence(matter, 'open')\n  const close = fence(matter, 'close')\n\n  return handle\n\n  /**\n   * Serialize a frontmatter node as markdown.\n   *\n   * @param {Literal} node\n   *   Node to serialize.\n   * @returns {string}\n   *   Serialized node.\n   */\n  function handle(node) {\n    return open + (node.value ? '\\n' + node.value : '') + '\\n' + close\n  }\n}\n\n/**\n * Get an `open` or `close` fence.\n *\n * @param {Matter} matter\n *   Structure.\n * @param {'close' | 'open'} prop\n *   Field to get.\n * @returns {string}\n *   Fence.\n */\nfunction fence(matter, prop) {\n  return matter.marker\n    ? pick(matter.marker, prop).repeat(3)\n    : // @ts-expect-error: Theyâ€™re mutually exclusive.\n      pick(matter.fence, prop)\n}\n\n/**\n * Take `open` or `close` fields when schema is an info object, or use the\n * given value when it is a string.\n *\n * @param {Info | string} schema\n *   Info object or value.\n * @param {'close' | 'open'} prop\n *   Field to get.\n * @returns {string}\n *   Thing to use for the opening or closing.\n */\nfunction pick(schema, prop) {\n  return typeof schema === 'string' ? schema : schema[prop]\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtZnJvbnRtYXR0ZXJAMi4wLjEvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtZnJvbnRtYXR0ZXIvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQSxhQUFhLHlCQUF5QjtBQUN0QztBQUNBLGFBQWEsbURBQW1EO0FBQ2hFLGFBQWEsOENBQThDO0FBQzNELGFBQWEsMkNBQTJDO0FBQ3hELGFBQWEsMENBQTBDO0FBQ3ZEO0FBQ0EsYUFBYSxnREFBZ0Q7QUFDN0QsYUFBYSxrREFBa0Q7QUFDL0QsYUFBYSxtREFBbUQ7QUFDaEU7O0FBRW1DO0FBQ3NCO0FBQ0o7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBLFdBQVcsNEJBQTRCO0FBQ3ZDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDTztBQUNQLGtCQUFrQiwwRUFBUztBQUMzQixhQUFhLGdDQUFnQztBQUM3QztBQUNBLGFBQWEsK0JBQStCO0FBQzVDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFVBQVU7QUFDVjs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhLG9CQUFvQjtBQUNqQztBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFZO0FBQ1osWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw2QkFBNkI7QUFDN0M7QUFDQTtBQUNBOztBQUVBO0FBQ0EsVUFBVTtBQUNWLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsMkNBQU07QUFDUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVU7QUFDVixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDRCQUE0QjtBQUN2QztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUCxhQUFhLCtCQUErQjtBQUM1QztBQUNBLGFBQWEsaUNBQWlDO0FBQzlDO0FBQ0Esa0JBQWtCLDBFQUFTO0FBQzNCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZ0VBQWtCO0FBQy9CLEtBQUs7QUFDTDs7QUFFQSxVQUFVO0FBQ1Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsYUFBYSwyQkFBMkI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBLFdBQVcsa0JBQWtCO0FBQzdCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUI7QUFDQSxXQUFXLGtCQUFrQjtBQUM3QjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdWFuZWxhX2NvbW8vRG9jdW1lbnRzL2RldmVsb3BtZW50L25vZGVqcy9hcmtvcy9ub2RlX21vZHVsZXMvLnBucG0vbWRhc3QtdXRpbC1mcm9udG1hdHRlckAyLjAuMS9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC1mcm9udG1hdHRlci9saWIvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkxpdGVyYWx9IExpdGVyYWxcbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdC11dGlsLWZyb20tbWFya2Rvd24nKS5Db21waWxlQ29udGV4dH0gQ29tcGlsZUNvbnRleHRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0LXV0aWwtZnJvbS1tYXJrZG93bicpLkV4dGVuc2lvbn0gRnJvbU1hcmtkb3duRXh0ZW5zaW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdC11dGlsLWZyb20tbWFya2Rvd24nKS5IYW5kbGV9IEZyb21NYXJrZG93bkhhbmRsZVxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QtdXRpbC10by1tYXJrZG93bicpLk9wdGlvbnN9IFRvTWFya2Rvd25FeHRlbnNpb25cbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstZXh0ZW5zaW9uLWZyb250bWF0dGVyJykuSW5mb30gSW5mb1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLWV4dGVuc2lvbi1mcm9udG1hdHRlcicpLk1hdHRlcn0gTWF0dGVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstZXh0ZW5zaW9uLWZyb250bWF0dGVyJykuT3B0aW9uc30gT3B0aW9uc1xuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5pbXBvcnQge3RvTWF0dGVyc30gZnJvbSAnbWljcm9tYXJrLWV4dGVuc2lvbi1mcm9udG1hdHRlcidcbmltcG9ydCBlc2NhcGVTdHJpbmdSZWdleHAgZnJvbSAnZXNjYXBlLXN0cmluZy1yZWdleHAnXG5cbi8qKlxuICogQ3JlYXRlIGFuIGV4dGVuc2lvbiBmb3IgYG1kYXN0LXV0aWwtZnJvbS1tYXJrZG93bmAuXG4gKlxuICogQHBhcmFtIHtPcHRpb25zIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gKiAgIENvbmZpZ3VyYXRpb24gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zIHtGcm9tTWFya2Rvd25FeHRlbnNpb259XG4gKiAgIEV4dGVuc2lvbiBmb3IgYG1kYXN0LXV0aWwtZnJvbS1tYXJrZG93bmAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9udG1hdHRlckZyb21NYXJrZG93bihvcHRpb25zKSB7XG4gIGNvbnN0IG1hdHRlcnMgPSB0b01hdHRlcnMob3B0aW9ucylcbiAgLyoqIEB0eXBlIHtGcm9tTWFya2Rvd25FeHRlbnNpb25bJ2VudGVyJ119ICovXG4gIGNvbnN0IGVudGVyID0ge31cbiAgLyoqIEB0eXBlIHtGcm9tTWFya2Rvd25FeHRlbnNpb25bJ2V4aXQnXX0gKi9cbiAgY29uc3QgZXhpdCA9IHt9XG4gIGxldCBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCBtYXR0ZXJzLmxlbmd0aCkge1xuICAgIGNvbnN0IG1hdHRlciA9IG1hdHRlcnNbaW5kZXhdXG4gICAgZW50ZXJbbWF0dGVyLnR5cGVdID0gb3BlbmVyKG1hdHRlcilcbiAgICBleGl0W21hdHRlci50eXBlXSA9IGNsb3NlXG4gICAgZXhpdFttYXR0ZXIudHlwZSArICdWYWx1ZSddID0gdmFsdWVcbiAgfVxuXG4gIHJldHVybiB7ZW50ZXIsIGV4aXR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtNYXR0ZXJ9IG1hdHRlclxuICogQHJldHVybnMge0Zyb21NYXJrZG93bkhhbmRsZX0gZW50ZXJcbiAqL1xuZnVuY3Rpb24gb3BlbmVyKG1hdHRlcikge1xuICByZXR1cm4gb3BlblxuXG4gIC8qKlxuICAgKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gICAqIEB0eXBlIHtGcm9tTWFya2Rvd25IYW5kbGV9XG4gICAqL1xuICBmdW5jdGlvbiBvcGVuKHRva2VuKSB7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogY3VzdG9tLlxuICAgIHRoaXMuZW50ZXIoe3R5cGU6IG1hdHRlci50eXBlLCB2YWx1ZTogJyd9LCB0b2tlbilcbiAgICB0aGlzLmJ1ZmZlcigpXG4gIH1cbn1cblxuLyoqXG4gKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gKiBAdHlwZSB7RnJvbU1hcmtkb3duSGFuZGxlfVxuICovXG5mdW5jdGlvbiBjbG9zZSh0b2tlbikge1xuICBjb25zdCBkYXRhID0gdGhpcy5yZXN1bWUoKVxuICBjb25zdCBub2RlID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdXG4gIGFzc2VydCgndmFsdWUnIGluIG5vZGUpXG4gIHRoaXMuZXhpdCh0b2tlbilcbiAgLy8gUmVtb3ZlIHRoZSBpbml0aWFsIGFuZCBmaW5hbCBlb2wuXG4gIG5vZGUudmFsdWUgPSBkYXRhLnJlcGxhY2UoL14oXFxyP1xcbnxcXHIpfChcXHI/XFxufFxccikkL2csICcnKVxufVxuXG4vKipcbiAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAqIEB0eXBlIHtGcm9tTWFya2Rvd25IYW5kbGV9XG4gKi9cbmZ1bmN0aW9uIHZhbHVlKHRva2VuKSB7XG4gIHRoaXMuY29uZmlnLmVudGVyLmRhdGEuY2FsbCh0aGlzLCB0b2tlbilcbiAgdGhpcy5jb25maWcuZXhpdC5kYXRhLmNhbGwodGhpcywgdG9rZW4pXG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIGV4dGVuc2lvbiBmb3IgYG1kYXN0LXV0aWwtdG8tbWFya2Rvd25gLlxuICpcbiAqIEBwYXJhbSB7T3B0aW9ucyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcHRpb25zXVxuICogICBDb25maWd1cmF0aW9uIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7VG9NYXJrZG93bkV4dGVuc2lvbn1cbiAqICAgRXh0ZW5zaW9uIGZvciBgbWRhc3QtdXRpbC10by1tYXJrZG93bmAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9udG1hdHRlclRvTWFya2Rvd24ob3B0aW9ucykge1xuICAvKiogQHR5cGUge1RvTWFya2Rvd25FeHRlbnNpb25bJ3Vuc2FmZSddfSAqL1xuICBjb25zdCB1bnNhZmUgPSBbXVxuICAvKiogQHR5cGUge1RvTWFya2Rvd25FeHRlbnNpb25bJ2hhbmRsZXJzJ119ICovXG4gIGNvbnN0IGhhbmRsZXJzID0ge31cbiAgY29uc3QgbWF0dGVycyA9IHRvTWF0dGVycyhvcHRpb25zKVxuICBsZXQgaW5kZXggPSAtMVxuXG4gIHdoaWxlICgrK2luZGV4IDwgbWF0dGVycy5sZW5ndGgpIHtcbiAgICBjb25zdCBtYXR0ZXIgPSBtYXR0ZXJzW2luZGV4XVxuXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogdGhpcyBjYW4gYWRkIGN1c3RvbSBmcm9udG1hdHRlciBub2Rlcy5cbiAgICAvLyBUeXBpbmcgdGhvc2UgaXMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIHRoZSBlbmQgdXNlci5cbiAgICBoYW5kbGVyc1ttYXR0ZXIudHlwZV0gPSBoYW5kbGVyKG1hdHRlcilcblxuICAgIGNvbnN0IG9wZW4gPSBmZW5jZShtYXR0ZXIsICdvcGVuJylcblxuICAgIHVuc2FmZS5wdXNoKHtcbiAgICAgIGF0QnJlYWs6IHRydWUsXG4gICAgICBjaGFyYWN0ZXI6IG9wZW4uY2hhckF0KDApLFxuICAgICAgYWZ0ZXI6IGVzY2FwZVN0cmluZ1JlZ2V4cChvcGVuLmNoYXJBdCgxKSlcbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIHt1bnNhZmUsIGhhbmRsZXJzfVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGhhbmRsZSB0aGF0IGNhbiBzZXJpYWxpemUgYSBmcm9udG1hdHRlciBub2RlIGFzIG1hcmtkb3duLlxuICpcbiAqIEBwYXJhbSB7TWF0dGVyfSBtYXR0ZXJcbiAqICAgU3RydWN0dXJlLlxuICogQHJldHVybnMgeyhub2RlOiBMaXRlcmFsKSA9PiBzdHJpbmd9IGVudGVyXG4gKiAgIEhhbmRsZXIuXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZXIobWF0dGVyKSB7XG4gIGNvbnN0IG9wZW4gPSBmZW5jZShtYXR0ZXIsICdvcGVuJylcbiAgY29uc3QgY2xvc2UgPSBmZW5jZShtYXR0ZXIsICdjbG9zZScpXG5cbiAgcmV0dXJuIGhhbmRsZVxuXG4gIC8qKlxuICAgKiBTZXJpYWxpemUgYSBmcm9udG1hdHRlciBub2RlIGFzIG1hcmtkb3duLlxuICAgKlxuICAgKiBAcGFyYW0ge0xpdGVyYWx9IG5vZGVcbiAgICogICBOb2RlIHRvIHNlcmlhbGl6ZS5cbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICogICBTZXJpYWxpemVkIG5vZGUuXG4gICAqL1xuICBmdW5jdGlvbiBoYW5kbGUobm9kZSkge1xuICAgIHJldHVybiBvcGVuICsgKG5vZGUudmFsdWUgPyAnXFxuJyArIG5vZGUudmFsdWUgOiAnJykgKyAnXFxuJyArIGNsb3NlXG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgYW4gYG9wZW5gIG9yIGBjbG9zZWAgZmVuY2UuXG4gKlxuICogQHBhcmFtIHtNYXR0ZXJ9IG1hdHRlclxuICogICBTdHJ1Y3R1cmUuXG4gKiBAcGFyYW0geydjbG9zZScgfCAnb3Blbid9IHByb3BcbiAqICAgRmllbGQgdG8gZ2V0LlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgRmVuY2UuXG4gKi9cbmZ1bmN0aW9uIGZlbmNlKG1hdHRlciwgcHJvcCkge1xuICByZXR1cm4gbWF0dGVyLm1hcmtlclxuICAgID8gcGljayhtYXR0ZXIubWFya2VyLCBwcm9wKS5yZXBlYXQoMylcbiAgICA6IC8vIEB0cy1leHBlY3QtZXJyb3I6IFRoZXnigJlyZSBtdXR1YWxseSBleGNsdXNpdmUuXG4gICAgICBwaWNrKG1hdHRlci5mZW5jZSwgcHJvcClcbn1cblxuLyoqXG4gKiBUYWtlIGBvcGVuYCBvciBgY2xvc2VgIGZpZWxkcyB3aGVuIHNjaGVtYSBpcyBhbiBpbmZvIG9iamVjdCwgb3IgdXNlIHRoZVxuICogZ2l2ZW4gdmFsdWUgd2hlbiBpdCBpcyBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge0luZm8gfCBzdHJpbmd9IHNjaGVtYVxuICogICBJbmZvIG9iamVjdCBvciB2YWx1ZS5cbiAqIEBwYXJhbSB7J2Nsb3NlJyB8ICdvcGVuJ30gcHJvcFxuICogICBGaWVsZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBUaGluZyB0byB1c2UgZm9yIHRoZSBvcGVuaW5nIG9yIGNsb3NpbmcuXG4gKi9cbmZ1bmN0aW9uIHBpY2soc2NoZW1hLCBwcm9wKSB7XG4gIHJldHVybiB0eXBlb2Ygc2NoZW1hID09PSAnc3RyaW5nJyA/IHNjaGVtYSA6IHNjaGVtYVtwcm9wXVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mdast-util-frontmatter@2.0.1/node_modules/mdast-util-frontmatter/lib/index.js\n");

/***/ })

};
;