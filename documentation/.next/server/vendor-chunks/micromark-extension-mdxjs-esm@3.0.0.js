"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/micromark-extension-mdxjs-esm@3.0.0";
exports.ids = ["vendor-chunks/micromark-extension-mdxjs-esm@3.0.0"];
exports.modules = {

/***/ "(rsc)/../node_modules/.pnpm/micromark-extension-mdxjs-esm@3.0.0/node_modules/micromark-extension-mdxjs-esm/dev/lib/syntax.js":
/*!******************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/micromark-extension-mdxjs-esm@3.0.0/node_modules/micromark-extension-mdxjs-esm/dev/lib/syntax.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mdxjsEsm: () => (/* binding */ mdxjsEsm)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(rsc)/../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! micromark-core-commonmark */ \"(rsc)/../node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/dev/lib/blank-line.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/../node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_events_to_acorn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-events-to-acorn */ \"(rsc)/../node_modules/.pnpm/micromark-util-events-to-acorn@2.0.3/node_modules/micromark-util-events-to-acorn/dev/lib/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! unist-util-position-from-estree */ \"(rsc)/../node_modules/.pnpm/unist-util-position-from-estree@2.0.0/node_modules/unist-util-position-from-estree/lib/index.js\");\n/* harmony import */ var vfile_message__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! vfile-message */ \"(rsc)/../node_modules/.pnpm/vfile-message@4.0.2/node_modules/vfile-message/lib/index.js\");\n/**\n * @typedef {import('micromark-util-events-to-acorn').Acorn} Acorn\n * @typedef {import('micromark-util-events-to-acorn').AcornOptions} AcornOptions\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef Options\n *   Configuration (required).\n * @property {Acorn} acorn\n *   Acorn parser to use (required).\n * @property {AcornOptions | null | undefined} [acornOptions]\n *   Configuration for acorn (default: `{ecmaVersion: 2024, locations: true,\n *   sourceType: 'module'}`); all fields except `locations` can be set.\n * @property {boolean | null | undefined} [addResult=false]\n *   Whether to add `estree` fields to tokens with results from acorn\n *   (default: `false`).\n */\n\n\n\n\n\n\n\n\n\nconst blankLineBefore = {tokenize: tokenizeNextBlank, partial: true}\n\nconst trouble = 'https://github.com/micromark/micromark-extension-mdxjs-esm'\n\nconst allowedAcornTypes = new Set([\n  'ExportAllDeclaration',\n  'ExportDefaultDeclaration',\n  'ExportNamedDeclaration',\n  'ImportDeclaration'\n])\n\n/**\n * Create an extension for `micromark` to enable MDX ESM syntax.\n *\n * @param {Options} options\n *   Configuration (required).\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable MDX\n *   ESM syntax.\n */\nfunction mdxjsEsm(options) {\n  const exportImportConstruct = {tokenize: tokenizeExportImport, concrete: true}\n\n  if (!options || !options.acorn || !options.acorn.parse) {\n    throw new Error('Expected an `acorn` instance passed in as `options.acorn`')\n  }\n\n  const acorn = options.acorn\n  const acornOptions = Object.assign(\n    {ecmaVersion: 2024, sourceType: 'module'},\n    options.acornOptions,\n    {locations: true}\n  )\n\n  return {\n    flow: {\n      [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.lowercaseE]: exportImportConstruct,\n      [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.lowercaseI]: exportImportConstruct\n    }\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeExportImport(effects, ok, nok) {\n    const self = this\n    const definedModuleSpecifiers =\n      self.parser.definedModuleSpecifiers ||\n      (self.parser.definedModuleSpecifiers = [])\n    const eventStart = this.events.length + 1 // Add the main `mdxjsEsm` token\n    let buffer = ''\n\n    return self.interrupt ? nok : start\n\n    /**\n     * Start of MDX ESM.\n     *\n     * ```markdown\n     * > | import a from 'b'\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      ;(0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(\n        code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.lowercaseE || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.lowercaseI,\n        'expected `e` or `i`'\n      )\n\n      // Only at the start of a line, not at whitespace or in a container.\n      if (self.now().column > 1) return nok(code)\n\n      effects.enter('mdxjsEsm')\n      effects.enter('mdxjsEsmData')\n      effects.consume(code)\n      // eslint-disable-next-line unicorn/prefer-code-point\n      buffer += String.fromCharCode(code)\n      return word\n    }\n\n    /**\n     * In keyword.\n     *\n     * ```markdown\n     * > | import a from 'b'\n     *     ^^^^^^\n     * ```\n     *\n     * @type {State}\n     */\n    function word(code) {\n      if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.asciiAlpha)(code)) {\n        effects.consume(code)\n        // @ts-expect-error: definitely a number.\n        // eslint-disable-next-line unicorn/prefer-code-point\n        buffer += String.fromCharCode(code)\n        return word\n      }\n\n      if (\n        (buffer === 'import' || buffer === 'export') &&\n        code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.space\n      ) {\n        effects.consume(code)\n        return inside\n      }\n\n      return nok(code)\n    }\n\n    /**\n     * In data.\n     *\n     * ```markdown\n     * > | import a from 'b'\n     *           ^\n     * ```\n     *\n     * @type {State}\n     */\n    function inside(code) {\n      if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code)) {\n        effects.exit('mdxjsEsmData')\n        return lineStart(code)\n      }\n\n      effects.consume(code)\n      return inside\n    }\n\n    /**\n     * At line ending.\n     *\n     * ```markdown\n     * > | import a from 'b'\n     *                      ^\n     *   | export {a}\n     * ```\n     *\n     * @type {State}\n     */\n    function lineStart(code) {\n      if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.eof) {\n        return atEnd(code)\n      }\n\n      if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code)) {\n        return effects.check(blankLineBefore, atEnd, continuationStart)(code)\n      }\n\n      effects.enter('mdxjsEsmData')\n      return inside(code)\n    }\n\n    /**\n     * At line ending that continues.\n     *\n     * ```markdown\n     * > | import a from 'b'\n     *                      ^\n     *   | export {a}\n     * ```\n     *\n     * @type {State}\n     */\n    function continuationStart(code) {\n      (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code))\n      effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.lineEnding)\n      effects.consume(code)\n      effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.lineEnding)\n      return lineStart\n    }\n\n    /**\n     * At end of line (blank or eof).\n     *\n     * ```markdown\n     * > | import a from 'b'\n     *                      ^\n     * ```\n     *\n     * @type {State}\n     */\n    function atEnd(code) {\n      const result = (0,micromark_util_events_to_acorn__WEBPACK_IMPORTED_MODULE_4__.eventsToAcorn)(self.events.slice(eventStart), {\n        acorn,\n        acornOptions,\n        tokenTypes: ['mdxjsEsmData'],\n        prefix:\n          definedModuleSpecifiers.length > 0\n            ? 'var ' + definedModuleSpecifiers.join(',') + '\\n'\n            : ''\n      })\n\n      if (result.error) {\n        // There’s an error, which could be solved with more content, and there\n        // is more content.\n        if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.eof && result.swallow) {\n          return continuationStart(code)\n        }\n\n        const error = new vfile_message__WEBPACK_IMPORTED_MODULE_5__.VFileMessage(\n          'Could not parse import/exports with acorn',\n          {\n            cause: result.error,\n            place: {\n              line: result.error.loc.line,\n              column: result.error.loc.column + 1,\n              offset: result.error.pos\n            },\n            ruleId: 'acorn',\n            source: 'micromark-extension-mdxjs-esm'\n          }\n        )\n        error.url = trouble + '#could-not-parse-importexports-with-acorn'\n        throw error\n      }\n\n      (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(result.estree, 'expected `estree` to be defined')\n\n      // Remove the `VariableDeclaration`.\n      if (definedModuleSpecifiers.length > 0) {\n        const declaration = result.estree.body.shift()\n        ;(0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(declaration)\n        ;(0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(declaration.type === 'VariableDeclaration')\n      }\n\n      let index = -1\n\n      while (++index < result.estree.body.length) {\n        const node = result.estree.body[index]\n\n        if (!allowedAcornTypes.has(node.type)) {\n          const error = new vfile_message__WEBPACK_IMPORTED_MODULE_5__.VFileMessage(\n            'Unexpected `' +\n              node.type +\n              '` in code: only import/exports are supported',\n            {\n              place: (0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_6__.positionFromEstree)(node),\n              ruleId: 'non-esm',\n              source: 'micromark-extension-mdxjs-esm'\n            }\n          )\n          error.url =\n            trouble +\n            '#unexpected-type-in-code-only-importexports-are-supported'\n          throw error\n        }\n\n        // Otherwise, when we’re not interrupting (hacky, because `interrupt` is\n        // used to parse containers and “sniff” if this is ESM), collect all the\n        // local values that are imported.\n        if (node.type === 'ImportDeclaration' && !self.interrupt) {\n          let index = -1\n\n          while (++index < node.specifiers.length) {\n            const specifier = node.specifiers[index]\n            definedModuleSpecifiers.push(specifier.local.name)\n          }\n        }\n      }\n\n      Object.assign(\n        effects.exit('mdxjsEsm'),\n        options.addResult ? {estree: result.estree} : undefined\n      )\n\n      return ok(code)\n    }\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    ;(0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code))\n    effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.lineEndingBlank)\n    effects.consume(code)\n    effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.types.lineEndingBlank)\n    return effects.attempt(micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_7__.blankLine, ok, nok)\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/micromark-extension-mdxjs-esm@3.0.0/node_modules/micromark-extension-mdxjs-esm/dev/lib/syntax.js\n");

/***/ })

};
;