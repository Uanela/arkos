"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/micromark-extension-frontmatter@2.0.0";
exports.ids = ["vendor-chunks/micromark-extension-frontmatter@2.0.0"];
exports.modules = {

/***/ "(rsc)/../node_modules/.pnpm/micromark-extension-frontmatter@2.0.0/node_modules/micromark-extension-frontmatter/dev/lib/syntax.js":
/*!**********************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/micromark-extension-frontmatter@2.0.0/node_modules/micromark-extension-frontmatter/dev/lib/syntax.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   frontmatter: () => (/* binding */ frontmatter)\n/* harmony export */ });\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/../node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/../node_modules/.pnpm/micromark-util-symbol@2.0.1/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var _to_matters_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./to-matters.js */ \"(rsc)/../node_modules/.pnpm/micromark-extension-frontmatter@2.0.0/node_modules/micromark-extension-frontmatter/dev/lib/to-matters.js\");\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef {import('./to-matters.js').Info} Info\n * @typedef {import('./to-matters.js').Matter} Matter\n * @typedef {import('./to-matters.js').Options} Options\n */\n\n\n\n\n\n/**\n * Create an extension for `micromark` to enable frontmatter syntax.\n *\n * @param {Options | null | undefined} [options='yaml']\n *   Configuration (default: `'yaml'`).\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable frontmatter syntax.\n */\nfunction frontmatter(options) {\n  const matters = (0,_to_matters_js__WEBPACK_IMPORTED_MODULE_0__.toMatters)(options)\n  /** @type {ConstructRecord} */\n  const flow = {}\n  let index = -1\n\n  while (++index < matters.length) {\n    const matter = matters[index]\n    const code = fence(matter, 'open').charCodeAt(0)\n    const construct = createConstruct(matter)\n    const existing = flow[code]\n\n    if (Array.isArray(existing)) {\n      existing.push(construct)\n    } else {\n      // Never a single object, always an array.\n      flow[code] = [construct]\n    }\n  }\n\n  return {flow}\n}\n\n/**\n * @param {Matter} matter\n * @returns {Construct}\n */\nfunction createConstruct(matter) {\n  const anywhere = matter.anywhere\n  const frontmatterType = /** @type {TokenType} */ (matter.type)\n  const fenceType = /** @type {TokenType} */ (frontmatterType + 'Fence')\n  const sequenceType = /** @type {TokenType} */ (fenceType + 'Sequence')\n  const valueType = /** @type {TokenType} */ (frontmatterType + 'Value')\n  const closingFenceConstruct = {tokenize: tokenizeClosingFence, partial: true}\n\n  /**\n   * Fence to look for.\n   *\n   * @type {string}\n   */\n  let buffer\n  let bufferIndex = 0\n\n  return {tokenize: tokenizeFrontmatter, concrete: true}\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeFrontmatter(effects, ok, nok) {\n    const self = this\n\n    return start\n\n    /**\n     * Start of frontmatter.\n     *\n     * ```markdown\n     * > | ---\n     *     ^\n     *   | title: \"Venus\"\n     *   | ---\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      const position = self.now()\n\n      if (\n        // Indent not allowed.\n        position.column === 1 &&\n        // Normally, only allowed in first line.\n        (position.line === 1 || anywhere)\n      ) {\n        buffer = fence(matter, 'open')\n        bufferIndex = 0\n\n        if (code === buffer.charCodeAt(bufferIndex)) {\n          effects.enter(frontmatterType)\n          effects.enter(fenceType)\n          effects.enter(sequenceType)\n          return openSequence(code)\n        }\n      }\n\n      return nok(code)\n    }\n\n    /**\n     * In open sequence.\n     *\n     * ```markdown\n     * > | ---\n     *     ^\n     *   | title: \"Venus\"\n     *   | ---\n     * ```\n     *\n     * @type {State}\n     */\n    function openSequence(code) {\n      if (bufferIndex === buffer.length) {\n        effects.exit(sequenceType)\n\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownSpace)(code)) {\n          effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.whitespace)\n          return openSequenceWhitespace(code)\n        }\n\n        return openAfter(code)\n      }\n\n      if (code === buffer.charCodeAt(bufferIndex++)) {\n        effects.consume(code)\n        return openSequence\n      }\n\n      return nok(code)\n    }\n\n    /**\n     * In whitespace after open sequence.\n     *\n     * ```markdown\n     * > | ---␠\n     *        ^\n     *   | title: \"Venus\"\n     *   | ---\n     * ```\n     *\n     * @type {State}\n     */\n    function openSequenceWhitespace(code) {\n      if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownSpace)(code)) {\n        effects.consume(code)\n        return openSequenceWhitespace\n      }\n\n      effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.whitespace)\n      return openAfter(code)\n    }\n\n    /**\n     * After open sequence.\n     *\n     * ```markdown\n     * > | ---\n     *        ^\n     *   | title: \"Venus\"\n     *   | ---\n     * ```\n     *\n     * @type {State}\n     */\n    function openAfter(code) {\n      if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEnding)(code)) {\n        effects.exit(fenceType)\n        effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding)\n        effects.consume(code)\n        effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding)\n        // Get ready for closing fence.\n        buffer = fence(matter, 'close')\n        bufferIndex = 0\n        return effects.attempt(closingFenceConstruct, after, contentStart)\n      }\n\n      // EOF is not okay.\n      return nok(code)\n    }\n\n    /**\n     * Start of content chunk.\n     *\n     * ```markdown\n     *   | ---\n     * > | title: \"Venus\"\n     *     ^\n     *   | ---\n     * ```\n     *\n     * @type {State}\n     */\n    function contentStart(code) {\n      if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEnding)(code)) {\n        return contentEnd(code)\n      }\n\n      effects.enter(valueType)\n      return contentInside(code)\n    }\n\n    /**\n     * In content chunk.\n     *\n     * ```markdown\n     *   | ---\n     * > | title: \"Venus\"\n     *     ^\n     *   | ---\n     * ```\n     *\n     * @type {State}\n     */\n    function contentInside(code) {\n      if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEnding)(code)) {\n        effects.exit(valueType)\n        return contentEnd(code)\n      }\n\n      effects.consume(code)\n      return contentInside\n    }\n\n    /**\n     * End of content chunk.\n     *\n     * ```markdown\n     *   | ---\n     * > | title: \"Venus\"\n     *                   ^\n     *   | ---\n     * ```\n     *\n     * @type {State}\n     */\n    function contentEnd(code) {\n      // Require a closing fence.\n      if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.codes.eof) {\n        return nok(code)\n      }\n\n      // Can only be an eol.\n      effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding)\n      effects.consume(code)\n      effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding)\n      return effects.attempt(closingFenceConstruct, after, contentStart)\n    }\n\n    /**\n     * After frontmatter.\n     *\n     * ```markdown\n     *   | ---\n     *   | title: \"Venus\"\n     * > | ---\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function after(code) {\n      // `code` must be eol/eof.\n      effects.exit(frontmatterType)\n      return ok(code)\n    }\n  }\n\n  /** @type {Tokenizer} */\n  function tokenizeClosingFence(effects, ok, nok) {\n    let bufferIndex = 0\n\n    return closeStart\n\n    /**\n     * Start of close sequence.\n     *\n     * ```markdown\n     *   | ---\n     *   | title: \"Venus\"\n     * > | ---\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function closeStart(code) {\n      if (code === buffer.charCodeAt(bufferIndex)) {\n        effects.enter(fenceType)\n        effects.enter(sequenceType)\n        return closeSequence(code)\n      }\n\n      return nok(code)\n    }\n\n    /**\n     * In close sequence.\n     *\n     * ```markdown\n     *   | ---\n     *   | title: \"Venus\"\n     * > | ---\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function closeSequence(code) {\n      if (bufferIndex === buffer.length) {\n        effects.exit(sequenceType)\n\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownSpace)(code)) {\n          effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.whitespace)\n          return closeSequenceWhitespace(code)\n        }\n\n        return closeAfter(code)\n      }\n\n      if (code === buffer.charCodeAt(bufferIndex++)) {\n        effects.consume(code)\n        return closeSequence\n      }\n\n      return nok(code)\n    }\n\n    /**\n     * In whitespace after close sequence.\n     *\n     * ```markdown\n     * > | ---\n     *   | title: \"Venus\"\n     *   | ---␠\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function closeSequenceWhitespace(code) {\n      if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownSpace)(code)) {\n        effects.consume(code)\n        return closeSequenceWhitespace\n      }\n\n      effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_2__.types.whitespace)\n      return closeAfter(code)\n    }\n\n    /**\n     * After close sequence.\n     *\n     * ```markdown\n     *   | ---\n     *   | title: \"Venus\"\n     * > | ---\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function closeAfter(code) {\n      if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_3__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEnding)(code)) {\n        effects.exit(fenceType)\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @param {Matter} matter\n * @param {'close' | 'open'} prop\n * @returns {string}\n */\nfunction fence(matter, prop) {\n  return matter.marker\n    ? pick(matter.marker, prop).repeat(3)\n    : // @ts-expect-error: They’re mutually exclusive.\n      pick(matter.fence, prop)\n}\n\n/**\n * @param {Info | string} schema\n * @param {'close' | 'open'} prop\n * @returns {string}\n */\nfunction pick(schema, prop) {\n  return typeof schema === 'string' ? schema : schema[prop]\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/micromark-extension-frontmatter@2.0.0/node_modules/micromark-extension-frontmatter/dev/lib/syntax.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/micromark-extension-frontmatter@2.0.0/node_modules/micromark-extension-frontmatter/dev/lib/to-matters.js":
/*!**************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/micromark-extension-frontmatter@2.0.0/node_modules/micromark-extension-frontmatter/dev/lib/to-matters.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toMatters: () => (/* binding */ toMatters)\n/* harmony export */ });\n/* harmony import */ var fault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fault */ \"(rsc)/../node_modules/.pnpm/fault@2.0.1/node_modules/fault/index.js\");\n/**\n * @typedef {'toml' | 'yaml'} Preset\n *   Known name of a frontmatter style.\n *\n * @typedef Info\n *   Sequence.\n *\n *   Depending on how this structure is used, it reflects a marker or a fence.\n * @property {string} close\n *   Closing.\n * @property {string} open\n *   Opening.\n *\n * @typedef MatterProps\n *   Fields describing a kind of matter.\n * @property {string} type\n *   Node type to tokenize as.\n * @property {boolean | null | undefined} [anywhere=false]\n *   Whether matter can be found anywhere in the document, normally, only matter\n *   at the start of the document is recognized.\n *\n *   > 👉 **Note**: using this is a terrible idea.\n *   > It’s called frontmatter, not matter-in-the-middle or so.\n *   > This makes your markdown less portable.\n *\n * @typedef MarkerProps\n *   Marker configuration.\n * @property {Info | string} marker\n *   Character repeated 3 times, used as complete fences.\n *\n *   For example the character `'-'` will result in `'---'` being used as the\n *   fence\n *   Pass `open` and `close` to specify different characters for opening and\n *   closing fences.\n * @property {never} [fence]\n *   If `marker` is set, `fence` must not be set.\n *\n * @typedef FenceProps\n *   Fence configuration.\n * @property {Info | string} fence\n *   Complete fences.\n *\n *   This can be used when fences contain different characters or lengths\n *   other than 3.\n *   Pass `open` and `close` to interface to specify different characters for opening and\n *   closing fences.\n * @property {never} [marker]\n *   If `fence` is set, `marker` must not be set.\n *\n * @typedef {(MatterProps & FenceProps) | (MatterProps & MarkerProps)} Matter\n *   Fields describing a kind of matter.\n *\n *   > 👉 **Note**: using `anywhere` is a terrible idea.\n *   > It’s called frontmatter, not matter-in-the-middle or so.\n *   > This makes your markdown less portable.\n *\n *   > 👉 **Note**: `marker` and `fence` are mutually exclusive.\n *   > If `marker` is set, `fence` must not be set, and vice versa.\n *\n * @typedef {Matter | Preset | Array<Matter | Preset>} Options\n *   Configuration.\n */\n\n\n\nconst own = {}.hasOwnProperty\nconst markers = {yaml: '-', toml: '+'}\n\n/**\n * Simplify options by normalizing them to an array of matters.\n *\n * @param {Options | null | undefined} [options='yaml']\n *   Configuration (default: `'yaml'`).\n * @returns {Array<Matter>}\n *   List of matters.\n */\nfunction toMatters(options) {\n  /** @type {Array<Matter>} */\n  const result = []\n  let index = -1\n\n  /** @type {Array<Matter | Preset>} */\n  const presetsOrMatters = Array.isArray(options)\n    ? options\n    : options\n    ? [options]\n    : ['yaml']\n\n  while (++index < presetsOrMatters.length) {\n    result[index] = matter(presetsOrMatters[index])\n  }\n\n  return result\n}\n\n/**\n * Simplify an option.\n *\n * @param {Matter | Preset} option\n *   Configuration.\n * @returns {Matter}\n *   Matter.\n */\nfunction matter(option) {\n  let result = option\n\n  if (typeof result === 'string') {\n    if (!own.call(markers, result)) {\n      throw (0,fault__WEBPACK_IMPORTED_MODULE_0__.fault)('Missing matter definition for `%s`', result)\n    }\n\n    result = {type: result, marker: markers[result]}\n  } else if (typeof result !== 'object') {\n    throw (0,fault__WEBPACK_IMPORTED_MODULE_0__.fault)('Expected matter to be an object, not `%j`', result)\n  }\n\n  if (!own.call(result, 'type')) {\n    throw (0,fault__WEBPACK_IMPORTED_MODULE_0__.fault)('Missing `type` in matter `%j`', result)\n  }\n\n  if (!own.call(result, 'fence') && !own.call(result, 'marker')) {\n    throw (0,fault__WEBPACK_IMPORTED_MODULE_0__.fault)('Missing `marker` or `fence` in matter `%j`', result)\n  }\n\n  return result\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1leHRlbnNpb24tZnJvbnRtYXR0ZXJAMi4wLjAvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1leHRlbnNpb24tZnJvbnRtYXR0ZXIvZGV2L2xpYi90by1tYXR0ZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQSxhQUFhLGlCQUFpQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEI7QUFDQSxjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEI7QUFDQSxjQUFjLDRCQUE0QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGVBQWU7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxlQUFlO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0EsYUFBYSwwREFBMEQ7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSwwQ0FBMEM7QUFDdkQ7QUFDQTs7QUFFMkI7O0FBRTNCLGNBQWM7QUFDZCxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTtBQUNBLFdBQVcsNEJBQTRCO0FBQ3ZDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDTztBQUNQLGFBQWEsZUFBZTtBQUM1QjtBQUNBOztBQUVBLGFBQWEsd0JBQXdCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpQkFBaUI7QUFDNUI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVksNENBQUs7QUFDakI7O0FBRUEsY0FBYztBQUNkLElBQUk7QUFDSixVQUFVLDRDQUFLO0FBQ2Y7O0FBRUE7QUFDQSxVQUFVLDRDQUFLO0FBQ2Y7O0FBRUE7QUFDQSxVQUFVLDRDQUFLO0FBQ2Y7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3VhbmVsYV9jb21vL0RvY3VtZW50cy9kZXZlbG9wbWVudC9ub2RlanMvYXJrb3Mvbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1leHRlbnNpb24tZnJvbnRtYXR0ZXJAMi4wLjAvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1leHRlbnNpb24tZnJvbnRtYXR0ZXIvZGV2L2xpYi90by1tYXR0ZXJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYgeyd0b21sJyB8ICd5YW1sJ30gUHJlc2V0XG4gKiAgIEtub3duIG5hbWUgb2YgYSBmcm9udG1hdHRlciBzdHlsZS5cbiAqXG4gKiBAdHlwZWRlZiBJbmZvXG4gKiAgIFNlcXVlbmNlLlxuICpcbiAqICAgRGVwZW5kaW5nIG9uIGhvdyB0aGlzIHN0cnVjdHVyZSBpcyB1c2VkLCBpdCByZWZsZWN0cyBhIG1hcmtlciBvciBhIGZlbmNlLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNsb3NlXG4gKiAgIENsb3NpbmcuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gb3BlblxuICogICBPcGVuaW5nLlxuICpcbiAqIEB0eXBlZGVmIE1hdHRlclByb3BzXG4gKiAgIEZpZWxkcyBkZXNjcmliaW5nIGEga2luZCBvZiBtYXR0ZXIuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdHlwZVxuICogICBOb2RlIHR5cGUgdG8gdG9rZW5pemUgYXMuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW4gfCBudWxsIHwgdW5kZWZpbmVkfSBbYW55d2hlcmU9ZmFsc2VdXG4gKiAgIFdoZXRoZXIgbWF0dGVyIGNhbiBiZSBmb3VuZCBhbnl3aGVyZSBpbiB0aGUgZG9jdW1lbnQsIG5vcm1hbGx5LCBvbmx5IG1hdHRlclxuICogICBhdCB0aGUgc3RhcnQgb2YgdGhlIGRvY3VtZW50IGlzIHJlY29nbml6ZWQuXG4gKlxuICogICA+IPCfkYkgKipOb3RlKio6IHVzaW5nIHRoaXMgaXMgYSB0ZXJyaWJsZSBpZGVhLlxuICogICA+IEl04oCZcyBjYWxsZWQgZnJvbnRtYXR0ZXIsIG5vdCBtYXR0ZXItaW4tdGhlLW1pZGRsZSBvciBzby5cbiAqICAgPiBUaGlzIG1ha2VzIHlvdXIgbWFya2Rvd24gbGVzcyBwb3J0YWJsZS5cbiAqXG4gKiBAdHlwZWRlZiBNYXJrZXJQcm9wc1xuICogICBNYXJrZXIgY29uZmlndXJhdGlvbi5cbiAqIEBwcm9wZXJ0eSB7SW5mbyB8IHN0cmluZ30gbWFya2VyXG4gKiAgIENoYXJhY3RlciByZXBlYXRlZCAzIHRpbWVzLCB1c2VkIGFzIGNvbXBsZXRlIGZlbmNlcy5cbiAqXG4gKiAgIEZvciBleGFtcGxlIHRoZSBjaGFyYWN0ZXIgYCctJ2Agd2lsbCByZXN1bHQgaW4gYCctLS0nYCBiZWluZyB1c2VkIGFzIHRoZVxuICogICBmZW5jZVxuICogICBQYXNzIGBvcGVuYCBhbmQgYGNsb3NlYCB0byBzcGVjaWZ5IGRpZmZlcmVudCBjaGFyYWN0ZXJzIGZvciBvcGVuaW5nIGFuZFxuICogICBjbG9zaW5nIGZlbmNlcy5cbiAqIEBwcm9wZXJ0eSB7bmV2ZXJ9IFtmZW5jZV1cbiAqICAgSWYgYG1hcmtlcmAgaXMgc2V0LCBgZmVuY2VgIG11c3Qgbm90IGJlIHNldC5cbiAqXG4gKiBAdHlwZWRlZiBGZW5jZVByb3BzXG4gKiAgIEZlbmNlIGNvbmZpZ3VyYXRpb24uXG4gKiBAcHJvcGVydHkge0luZm8gfCBzdHJpbmd9IGZlbmNlXG4gKiAgIENvbXBsZXRlIGZlbmNlcy5cbiAqXG4gKiAgIFRoaXMgY2FuIGJlIHVzZWQgd2hlbiBmZW5jZXMgY29udGFpbiBkaWZmZXJlbnQgY2hhcmFjdGVycyBvciBsZW5ndGhzXG4gKiAgIG90aGVyIHRoYW4gMy5cbiAqICAgUGFzcyBgb3BlbmAgYW5kIGBjbG9zZWAgdG8gaW50ZXJmYWNlIHRvIHNwZWNpZnkgZGlmZmVyZW50IGNoYXJhY3RlcnMgZm9yIG9wZW5pbmcgYW5kXG4gKiAgIGNsb3NpbmcgZmVuY2VzLlxuICogQHByb3BlcnR5IHtuZXZlcn0gW21hcmtlcl1cbiAqICAgSWYgYGZlbmNlYCBpcyBzZXQsIGBtYXJrZXJgIG11c3Qgbm90IGJlIHNldC5cbiAqXG4gKiBAdHlwZWRlZiB7KE1hdHRlclByb3BzICYgRmVuY2VQcm9wcykgfCAoTWF0dGVyUHJvcHMgJiBNYXJrZXJQcm9wcyl9IE1hdHRlclxuICogICBGaWVsZHMgZGVzY3JpYmluZyBhIGtpbmQgb2YgbWF0dGVyLlxuICpcbiAqICAgPiDwn5GJICoqTm90ZSoqOiB1c2luZyBgYW55d2hlcmVgIGlzIGEgdGVycmlibGUgaWRlYS5cbiAqICAgPiBJdOKAmXMgY2FsbGVkIGZyb250bWF0dGVyLCBub3QgbWF0dGVyLWluLXRoZS1taWRkbGUgb3Igc28uXG4gKiAgID4gVGhpcyBtYWtlcyB5b3VyIG1hcmtkb3duIGxlc3MgcG9ydGFibGUuXG4gKlxuICogICA+IPCfkYkgKipOb3RlKio6IGBtYXJrZXJgIGFuZCBgZmVuY2VgIGFyZSBtdXR1YWxseSBleGNsdXNpdmUuXG4gKiAgID4gSWYgYG1hcmtlcmAgaXMgc2V0LCBgZmVuY2VgIG11c3Qgbm90IGJlIHNldCwgYW5kIHZpY2UgdmVyc2EuXG4gKlxuICogQHR5cGVkZWYge01hdHRlciB8IFByZXNldCB8IEFycmF5PE1hdHRlciB8IFByZXNldD59IE9wdGlvbnNcbiAqICAgQ29uZmlndXJhdGlvbi5cbiAqL1xuXG5pbXBvcnQge2ZhdWx0fSBmcm9tICdmYXVsdCdcblxuY29uc3Qgb3duID0ge30uaGFzT3duUHJvcGVydHlcbmNvbnN0IG1hcmtlcnMgPSB7eWFtbDogJy0nLCB0b21sOiAnKyd9XG5cbi8qKlxuICogU2ltcGxpZnkgb3B0aW9ucyBieSBub3JtYWxpemluZyB0aGVtIHRvIGFuIGFycmF5IG9mIG1hdHRlcnMuXG4gKlxuICogQHBhcmFtIHtPcHRpb25zIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnM9J3lhbWwnXVxuICogICBDb25maWd1cmF0aW9uIChkZWZhdWx0OiBgJ3lhbWwnYCkuXG4gKiBAcmV0dXJucyB7QXJyYXk8TWF0dGVyPn1cbiAqICAgTGlzdCBvZiBtYXR0ZXJzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9NYXR0ZXJzKG9wdGlvbnMpIHtcbiAgLyoqIEB0eXBlIHtBcnJheTxNYXR0ZXI+fSAqL1xuICBjb25zdCByZXN1bHQgPSBbXVxuICBsZXQgaW5kZXggPSAtMVxuXG4gIC8qKiBAdHlwZSB7QXJyYXk8TWF0dGVyIHwgUHJlc2V0Pn0gKi9cbiAgY29uc3QgcHJlc2V0c09yTWF0dGVycyA9IEFycmF5LmlzQXJyYXkob3B0aW9ucylcbiAgICA/IG9wdGlvbnNcbiAgICA6IG9wdGlvbnNcbiAgICA/IFtvcHRpb25zXVxuICAgIDogWyd5YW1sJ11cblxuICB3aGlsZSAoKytpbmRleCA8IHByZXNldHNPck1hdHRlcnMubGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IG1hdHRlcihwcmVzZXRzT3JNYXR0ZXJzW2luZGV4XSlcbiAgfVxuXG4gIHJldHVybiByZXN1bHRcbn1cblxuLyoqXG4gKiBTaW1wbGlmeSBhbiBvcHRpb24uXG4gKlxuICogQHBhcmFtIHtNYXR0ZXIgfCBQcmVzZXR9IG9wdGlvblxuICogICBDb25maWd1cmF0aW9uLlxuICogQHJldHVybnMge01hdHRlcn1cbiAqICAgTWF0dGVyLlxuICovXG5mdW5jdGlvbiBtYXR0ZXIob3B0aW9uKSB7XG4gIGxldCByZXN1bHQgPSBvcHRpb25cblxuICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoIW93bi5jYWxsKG1hcmtlcnMsIHJlc3VsdCkpIHtcbiAgICAgIHRocm93IGZhdWx0KCdNaXNzaW5nIG1hdHRlciBkZWZpbml0aW9uIGZvciBgJXNgJywgcmVzdWx0KVxuICAgIH1cblxuICAgIHJlc3VsdCA9IHt0eXBlOiByZXN1bHQsIG1hcmtlcjogbWFya2Vyc1tyZXN1bHRdfVxuICB9IGVsc2UgaWYgKHR5cGVvZiByZXN1bHQgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgZmF1bHQoJ0V4cGVjdGVkIG1hdHRlciB0byBiZSBhbiBvYmplY3QsIG5vdCBgJWpgJywgcmVzdWx0KVxuICB9XG5cbiAgaWYgKCFvd24uY2FsbChyZXN1bHQsICd0eXBlJykpIHtcbiAgICB0aHJvdyBmYXVsdCgnTWlzc2luZyBgdHlwZWAgaW4gbWF0dGVyIGAlamAnLCByZXN1bHQpXG4gIH1cblxuICBpZiAoIW93bi5jYWxsKHJlc3VsdCwgJ2ZlbmNlJykgJiYgIW93bi5jYWxsKHJlc3VsdCwgJ21hcmtlcicpKSB7XG4gICAgdGhyb3cgZmF1bHQoJ01pc3NpbmcgYG1hcmtlcmAgb3IgYGZlbmNlYCBpbiBtYXR0ZXIgYCVqYCcsIHJlc3VsdClcbiAgfVxuXG4gIHJldHVybiByZXN1bHRcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/micromark-extension-frontmatter@2.0.0/node_modules/micromark-extension-frontmatter/dev/lib/to-matters.js\n");

/***/ })

};
;