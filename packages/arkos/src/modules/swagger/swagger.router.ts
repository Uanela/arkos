import { Router } from "express";
// import * as scalar from "@scalar/express-api-reference";
import swaggerJsdoc from "swagger-jsdoc";
import { ArkosConfig } from "../../types/arkos-config";
import deepmerge from "../../utils/helpers/deepmerge.helper";
import {
  generatePathsForModels,
  getOpenAPIJsonSchemasByConfigMode,
} from "./utils/helpers/swagger.router.helpers";
import { capitalize } from "../../utils/helpers/text.helpers";
import missingJsonSchemaGenerator from "./utils/helpers/missing-json-schemas-generator";

const swaggerRouter = Router();

export async function getSwaggerRouter(
  arkosConfig: ArkosConfig
): Promise<Router> {
  let defaultJsonSchemas = await getOpenAPIJsonSchemasByConfigMode(arkosConfig);
  const defaultModelsPaths = await generatePathsForModels(arkosConfig);
  defaultJsonSchemas = {
    ...defaultJsonSchemas,
    ...(await missingJsonSchemaGenerator.generateMissingJsonSchemas(
      defaultModelsPaths,
      defaultJsonSchemas,
      arkosConfig
    )),
  };

  const defaultSwaggerConfig: ArkosConfig["swagger"] = {
    endpoint: "/docs",
    mode: "prisma",
    strict: false,
    options: {
      definition: {
        openapi: "3.0.0",
        info: {
          title: "Powered By Arkos.js",
          version: "1.0.0",
          description:
            "This API was automatically generated by Arkos.js, read more about at www.arkosjs.com",
        },
        servers: [
          {
            url: `http://${arkosConfig.host}:${arkosConfig.port}`,
            description: `Local ${capitalize(process.env.NODE_ENV || "development")} Server`,
          },
        ],
        paths: defaultModelsPaths,
        components: {
          schemas: defaultJsonSchemas || {},
          securitySchemes: {
            BearerAuth: {
              type: "http",
              scheme: "bearer",
              bearerFormat: "JWT",
            },
          },
        },
        security: [],
      },
      apis: [
        "./src/routers/*.router.{ts,js}",
        "./src/modules/**/*.router.{ts,js}",
      ],
      deepLinking: true,
      tryItOutEnabled: true,
      persistAuthorization: false,
    },
    scalarApiReferenceConfiguration: {
      theme: "deepSpace",
      darkMode: true,
      layout: "modern",
      showSidebar: true,
      hideDownloadButton: false,
      metaData: {
        title: "Arkos.js API Documentation",
        description: "API documentation generated by Arkos.js",
      },
      pageTitle: "Arkos.js API Documentation",
    },
  };

  // Merge default config with user config
  const swaggerConfigs = deepmerge(
    defaultSwaggerConfig || {},
    arkosConfig.swagger || {}
  ) as ArkosConfig["swagger"];

  const { definition, ...options } = swaggerConfigs?.options!;

  // Generate OpenAPI specification using swagger-jsdoc
  const swaggerSpecification = swaggerJsdoc({
    definition: definition as swaggerJsdoc.SwaggerDefinition,
    ...options,
  });

  const importFn = new Function("path", "return import(path)");
  const scalar = await importFn("@scalar/express-api-reference");

  // Serve Scalar API documentation
  swaggerRouter.use(
    swaggerConfigs!.endpoint!,
    scalar.apiReference({
      content: swaggerSpecification,
      ...swaggerConfigs?.scalarApiReferenceConfiguration,
    })
  );

  return swaggerRouter;
}
