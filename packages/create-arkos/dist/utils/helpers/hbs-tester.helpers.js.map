{"version":3,"file":"hbs-tester.helpers.js","sourceRoot":"","sources":["../../../src/utils/helpers/hbs-tester.helpers.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,4CAAoB;AACpB,gDAAwB;AACxB,4DAAoC;AAEpC,oBAAU,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AACnD,oBAAU,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AAEpD,CAAC,GAAG,EAAE;IACJ,MAAM,YAAY,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,6BAA6B,CAAC;IACnE,MAAM,SAAS,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,0BAA0B,CAAC;IAC7D,MAAM,MAAM,GAAkB;QAC5B,WAAW,EAAE,eAAe;QAC5B,UAAU,EAAE,IAAI;QAChB,UAAU,EAAE;YACV,IAAI,EAAE,KAAK;SACZ;QACD,cAAc,EAAE;YACd,IAAI,EAAE,SAAS;YACf,aAAa,EAAE,OAAO;YACtB,aAAa,EAAE,IAAI;SACpB;QACD,MAAM,EAAE;YACN,QAAQ,EAAE,SAAS;YACnB,cAAc,EAAE,sBAAsB;SACvC;QACD,WAAW,EAAE,SAAS;KACvB,CAAC;IAEF,SAAS,gBAAgB,CAAC,GAAW,EAAE,WAAW,GAAG,EAAE;QACrD,YAAE,CAAC,WAAW,CAAC,GAAG,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAO,MAAM,EAAE,EAAE;YACpE,MAAM,QAAQ,GAAG,cAAI,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;YAC7C,MAAM,YAAY,GAAG,cAAI,CAAC,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;YAEzD,IAAI,MAAM,CAAC,WAAW,EAAE,EAAE;gBACxB,gBAAgB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;aAC1C;iBAAM,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;gBACvC,MAAM,YAAY,GAAG,QAAQ,CAAC;gBAC9B,MAAM,QAAQ,GAAG,oBAAU,CAAC,OAAO,CACjC,YAAE,CAAC,YAAY,CAAC,YAAY,EAAE,MAAM,CAAC,CACtC,CAAC;gBAEF,MAAM,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;gBACjC,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC;gBAE9C,IAAI,UAAU,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;gBACxE,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC;oBACjC,UAAU,GAAG,cAAI,CAAC,IAAI,CACpB,SAAS,EACT,YAAY,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CACrC,CAAC;gBAEJ,YAAE,CAAC,SAAS,CAAC,cAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;gBAC5D,YAAE,CAAC,aAAa,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;aACvC;QACH,CAAC,CAAA,CAAC,CAAC;IACL,CAAC;IAED,gBAAgB,CAAC,YAAY,CAAC,CAAC;AACjC,CAAC,CAAC,EAAE,CAAC","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport handlebars from \"handlebars\";\nimport { ProjectConfig } from \"../project-config-inquirer\";\nhandlebars.registerHelper(\"eq\", (a, b) => a === b);\nhandlebars.registerHelper(\"neq\", (a, b) => a !== b);\n\n(() => {\n  const templatesDir = `${process.cwd()}/cache/handlebars/templates`;\n  const outputDir = `${process.cwd()}/cache/handlebars/output`;\n  const config: ProjectConfig = {\n    projectName: \"arkos-project\",\n    typescript: true,\n    validation: {\n      type: \"zod\",\n    },\n    authentication: {\n      type: \"dynamic\",\n      usernameField: \"email\",\n      multipleRoles: true,\n    },\n    prisma: {\n      provider: \"mongodb\",\n      idDatabaseType: \"@db @default(uuid())\",\n    },\n    projectPath: outputDir,\n  };\n\n  function processTemplates(dir: string, relativeDir = \"\") {\n    fs.readdirSync(dir, { withFileTypes: true }).forEach(async (dirent) => {\n      const fullPath = path.join(dir, dirent.name);\n      const relativePath = path.join(relativeDir, dirent.name);\n\n      if (dirent.isDirectory()) {\n        processTemplates(fullPath, relativePath);\n      } else if (dirent.name.endsWith(\".hbs\")) {\n        const templatePath = fullPath;\n        const template = handlebars.compile(\n          fs.readFileSync(templatePath, \"utf8\")\n        );\n\n        const content = template(config);\n        const ext = config.typescript ? \".ts\" : \".js\";\n\n        let outputPath = path.join(outputDir, relativePath.replace(\".hbs\", \"\"));\n        if (dirent.name.endsWith(\".ts.hbs\"))\n          outputPath = path.join(\n            outputDir,\n            relativePath.replace(\".ts.hbs\", ext)\n          );\n\n        fs.mkdirSync(path.dirname(outputPath), { recursive: true });\n        fs.writeFileSync(outputPath, content);\n      }\n    });\n  }\n\n  processTemplates(templatesDir);\n})();\n"]}