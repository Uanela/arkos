{"version":3,"file":"project-config-inquirer.js","sourceRoot":"","sources":["../../src/utils/project-config-inquirer.ts"],"names":[],"mappings":"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","sourcesContent":["import path from \"path\";\nimport inquirer from \"inquirer\";\nimport chalk from \"chalk\";\n\nexport interface ProjectConfig {\n  projectName: string;\n  typescript: boolean;\n  validation: {\n    type?: \"zod\" | \"class-validator\";\n  };\n  authentication: {\n    type?: \"static\" | \"dynamic\" | \"define later\";\n    usernameField?: \"username\" | \"email\" | \"custom\";\n    multipleRoles: boolean;\n  };\n  prisma: {\n    provider:\n      | \"postgresql\"\n      | \"mysql\"\n      | \"sqlite\"\n      | \"sqlserver\"\n      | \"cockroachdb\"\n      | \"mongodb\";\n    idDatabaseType: string;\n  };\n  projectPath: string;\n}\n\nclass ProjectConfigInquirer {\n  private config: ProjectConfig;\n\n  constructor() {\n    this.config = {} as ProjectConfig;\n  }\n\n  async run() {\n    await this.promptProjectName();\n    await this.promptTypescript();\n    await this.promptPrismaProvider();\n    await this.promptValidation();\n    await this.promptAuthentication();\n\n    const projectPath = path.resolve(process.cwd(), this.config.projectName);\n    this.config.projectPath = projectPath;\n\n    return this.config;\n  }\n\n  private async promptProjectName() {\n    let projectName = process.argv[2];\n\n    if (!projectName) {\n      const result = await inquirer.prompt([\n        {\n          type: \"input\",\n          name: \"projectName\",\n          message: \"What is the name of your project?\",\n          default: \"my-arkos-project\",\n          validate: (input) =>\n            input.length > 0 ? true : \"Project name cannot be empty\",\n        },\n      ]);\n      projectName = result.projectName;\n    }\n    this.config.projectName = projectName;\n  }\n\n  private async promptTypescript() {\n    const { typescript } = await inquirer.prompt([\n      {\n        type: \"confirm\",\n        name: \"typescript\",\n        message: `Would you like to use ${chalk.cyan(\"TypeScript\")}?`,\n        default: false,\n      },\n    ]);\n    this.config.typescript = typescript;\n  }\n\n  private async promptPrismaProvider() {\n    const { prismaProvider } = await inquirer.prompt([\n      {\n        type: \"list\",\n        name: \"prismaProvider\",\n        message: `What db provider will be used for ${chalk.cyan(\"Prisma\")}?`,\n        choices: [\n          \"postgresql\",\n          \"mongodb\",\n          \"mysql\",\n          \"sqlite\",\n          \"sqlserver\",\n          \"cockroachdb\",\n        ],\n      },\n    ]);\n\n    // Set the correct idDatabaseType based on provider\n    let idDatabaseType: string;\n\n    switch (prismaProvider) {\n      case \"mongodb\":\n        idDatabaseType = '@id @default(auto()) @map(\"_id\") @db.ObjectId';\n        break;\n      case \"sqlite\":\n        idDatabaseType = \"@id @default(cuid())\";\n        break;\n      default:\n        idDatabaseType = \"@id @default(uuid())\";\n    }\n\n    this.config.prisma = {\n      provider: prismaProvider,\n      idDatabaseType: idDatabaseType,\n    };\n  }\n\n  private async promptValidation() {\n    const { useValidation } = await inquirer.prompt([\n      {\n        type: \"confirm\",\n        name: \"useValidation\",\n        message: `Would you like to set up ${chalk.cyan(\"Validation\")}?`,\n        default: true,\n      },\n    ]);\n\n    if (useValidation) {\n      const { validationType } = await inquirer.prompt([\n        {\n          type: \"list\",\n          name: \"validationType\",\n          message: \"Choose validation library:\",\n          choices: [\"zod\", \"class-validator\"],\n        },\n      ]);\n      this.config.validation = {\n        type: validationType,\n      };\n    }\n  }\n\n  private async promptAuthentication() {\n    const { useAuthentication } = await inquirer.prompt([\n      {\n        type: \"confirm\",\n        name: \"useAuthentication\",\n        message: `Would you like to set up ${chalk.cyan(\"Authentication\")}?`,\n        default: true,\n      },\n    ]);\n\n    if (useAuthentication) {\n      const { authenticationType } = await inquirer.prompt([\n        {\n          type: \"list\",\n          name: \"authenticationType\",\n          message: \"Choose authentication type:\",\n          choices: [\"static\", \"dynamic\", \"define later\"],\n        },\n      ]);\n\n      if (authenticationType !== \"define later\") {\n        const { multipleRoles } = await inquirer.prompt([\n          {\n            type: \"confirm\",\n            name: \"multipleRoles\",\n            default: true,\n            message: `Would you like to use authentication with ${chalk.cyan(\"Multiple Roles\")}?`,\n          },\n        ]);\n\n        const { usernameField } = await inquirer.prompt([\n          {\n            type: \"list\",\n            name: \"usernameField\",\n            message: \"Choose default username field for login:\",\n            choices: [\"email\", \"username\", \"define later\"],\n          },\n        ]);\n\n        this.config.authentication = {\n          type: authenticationType,\n          usernameField:\n            usernameField === \"define later\" ? \"custom\" : usernameField,\n          multipleRoles,\n        };\n      }\n    }\n  }\n}\n\nconst projectConfigInquirer = new ProjectConfigInquirer();\n\nexport default projectConfigInquirer;\n"]}