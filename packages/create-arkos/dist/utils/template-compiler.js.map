{"version":3,"file":"template-compiler.js","sourceRoot":"","sources":["../../src/utils/template-compiler.ts"],"names":[],"mappings":"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","sourcesContent":["import { ProjectConfig } from \"./project-config-inquirer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport handlebars from \"handlebars\";\n\nclass TemplateCompiler {\n  async canCompileAuthenticationTemplates(config: ProjectConfig) {\n    return !!config.authentication;\n  }\n\n  filesToBeSkipped(config: ProjectConfig) {\n    const files: string[] = [];\n\n    if (config.authentication.type !== \"define later\")\n      files.concat([\"user.prisma.hbs\"]);\n\n    if (config.authentication?.type === \"static\")\n      files.concat([\"auth-role.prisma.hbs\", \"auth-permission.prisma.hbs\"]);\n\n    if (!config.typescript) files.concat([\"tsconfig.json.hbs\"]);\n\n    return files;\n  }\n  /**\n   * Compiles the Arkos.js project with handlebars templates\n   *\n   * @param templatesDir {string} templates location\n   * @param config {ProjectConfig} the project configuration\n   * @returns void\n   * */\n  async compile(templatesDir: string, config: ProjectConfig) {\n    const outputDir = config.projectPath;\n    const isTypescript = config.typescript;\n    const filesToBeSkipped = this.filesToBeSkipped(config);\n\n    function processTemplates(dir: string, relativeDir = \"\") {\n      fs.readdirSync(dir, { withFileTypes: true }).forEach(async (dirent) => {\n        if (filesToBeSkipped.includes(dirent.name)) return;\n\n        const fullPath = path.join(dir, dirent.name);\n        const relativePath = path.join(relativeDir, dirent.name);\n\n        if (dirent.isDirectory()) {\n          processTemplates(fullPath, relativePath);\n        } else if (dirent.name.endsWith(\".hbs\")) {\n          const templatePath = fullPath;\n          const template = handlebars.compile(\n            fs.readFileSync(templatePath, \"utf8\")\n          );\n\n          let arkosLatestVersion = \"1.0.0\";\n\n          const content = template({ ...config, arkosLatestVersion });\n          const ext = isTypescript ? \".ts\" : \".js\";\n\n          let outputPath = path.join(\n            outputDir,\n            relativePath.replace(\".hbs\", \"\")\n          );\n          if (dirent.name.endsWith(\".ts.hbs\"))\n            outputPath = path.join(\n              outputDir,\n              relativePath.replace(\".ts.hbs\", ext)\n            );\n\n          fs.mkdirSync(path.dirname(outputPath), { recursive: true });\n          fs.writeFileSync(outputPath, content);\n        }\n      });\n    }\n\n    processTemplates(templatesDir);\n  }\n}\n\nconst templateCompiler = new TemplateCompiler();\n\nexport default templateCompiler;\n"]}