import 'reflect-metadata'
import { 
  IsString, 
  MinLength, 
  Matches, 
  IsNotEmpty, 
  IsBoolean, 
  IsOptional,
  IsArray,
  ValidateNested,
  Type,
  IsEnum
} from 'class-validator'
import apiActions from "../../../utils/validation/api-actions"
{{#if (eq authentication.type "static")}}
{{#if (neq prisma.provider "sqlite")}}
import { UserRole } from "@prisma/client"
{{/if}}
{{/if}}

{{#if (eq authentication.type "dynamic")}}
class RoleConnectDto {
  @IsString()
  @IsNotEmpty()
  id: string
}

class RoleConnectionDto {
  @ValidateNested()
  @Type(() => RoleConnectDto)
  role: RoleConnectDto
}
{{/if}}

export default class CreateUserDto {
  @IsString()
  @IsNotEmpty({ message: '{{authentication.usernameField}} is required' })
  {{authentication.usernameField}}: string

  @IsString()
  @MinLength(8, { message: 'Password must be at least 8 characters long' })
  @Matches(/[a-z]/, { message: 'Password must contain at least one lowercase letter' })
  @Matches(/[A-Z]/, { message: 'Password must contain at least one uppercase letter' })
  password: string

  @IsBoolean()
  @IsOptional()
  isSuperUser?: boolean = false

  @IsBoolean()
  @IsOptional()
  isStaff?: boolean = false

  @IsBoolean()
  @IsOptional()
  isActive?: boolean = true

  {{#if (eq authentication.type "static")}}
  {{#if (eq prisma.provider "sqlite")}}
  @IsString()
  @IsNotEmpty()
  role: string
  {{else}}
  {{#if authentication.multipleRoles}}
  @IsArray()
  @IsEnum(UserRole, { each: true })
  roles: UserRole[]
  {{else}}
  @IsEnum(UserRole)
  role: UserRole
  {{/if}}
  {{/if}}
  {{else}}
  {{#if authentication.multipleRoles}}
  @IsArray()
  @ValidateNested({ each: true })
  @Type(() => RoleConnectionDto)
  @IsOptional()
  roles?: RoleConnectionDto[]
  {{else}}
  @ValidateNested()
  @Type(() => RoleConnectionDto)
  @IsOptional()
  role?: RoleConnectionDto
  {{/if}}
  {{/if}}
}
