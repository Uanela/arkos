import { describe, it, expect, vi, beforeEach } from "vitest";
import { renderTemplate } from "../../../src/utils/helpers/templates.helpers";

describe("Package.json template rendering", () => {
  const templatePath = "basic/package.json.hbs";

  beforeEach(() => {
    vi.clearAllMocks();
  });

  it("should render with TypeScript dependencies when typescript is true", () => {
    const context = {
      projectName: "my-arkos-project",
      typescript: true,
      validation: {
        type: "class-validator",
      },
    };

    const result = renderTemplate(templatePath, context);
    const packageJson = JSON.parse(result);

    expect(packageJson.name).toBe("my-arkos-project");
    expect(packageJson.version).toBe("1.0.0");
    expect(packageJson.type).toBeUndefined(); // Should not have type for TypeScript
    expect(packageJson.description).toBe(
      "This RESTful API was generated by Arkos.js, read more about Arkos.js at www.arkosjs.com"
    );

    // Check scripts
    expect(packageJson.scripts.dev).toBe("arkos dev");
    expect(packageJson.scripts.build).toBe("arkos build");
    expect(packageJson.scripts.start).toBe("arkos start");
    expect(packageJson.scripts.arkos).toBe("arkos");

    // Check prisma config
    expect(packageJson.prisma.schema).toBe("prisma/schema/");

    // Check TypeScript devDependencies
    expect(packageJson.devDependencies.typescript).toBe("^5.7.3");
    expect(packageJson.devDependencies["@types/node"]).toBe("^24.0.12");
    expect(packageJson.devDependencies["@types/express"]).toBe("^5.0.0");
    expect(packageJson.devDependencies["@types/swagger-jsdoc"]).toBe("^6.0.4");
    expect(packageJson.devDependencies["tsx-strict"]).toBe("^0.1.4");
    expect(packageJson.devDependencies.prisma).toBe("^6.11.1");

    // Check dependencies
    expect(packageJson.dependencies.arkos).toBe("^1.2.16-beta");
    expect(packageJson.dependencies.express).toBe("^4.21.2");
    expect(packageJson.dependencies["@prisma/client"]).toBe("^6.4.1");
    expect(packageJson.dependencies["swagger-jsdoc"]).toBe("^6.2.8");

    // Check class-validator dependencies
    expect(packageJson.dependencies["reflect-metadata"]).toBe("^0.2.2");
    expect(packageJson.dependencies["class-transformer"]).toBe("^0.5.1");
    expect(packageJson.dependencies["class-validator"]).toBe("^0.14.1");
    expect(packageJson.dependencies["class-validator-jsonschema"]).toBe(
      "^5.0.2"
    );
  });

  it("should render with JavaScript configuration when typescript is false", () => {
    const context = {
      projectName: "my-js-project",
      typescript: false,
      validation: {
        type: "zod",
      },
    };

    const result = renderTemplate(templatePath, context);
    const packageJson = JSON.parse(result);

    expect(packageJson.name).toBe("my-js-project");
    expect(packageJson.type).toBe("module"); // Should have type for JavaScript

    // Should not have TypeScript devDependencies
    expect(packageJson.devDependencies.typescript).toBeUndefined();
    expect(packageJson.devDependencies["@types/node"]).toBeUndefined();
    expect(packageJson.devDependencies["@types/express"]).toBeUndefined();
    expect(packageJson.devDependencies["@types/swagger-jsdoc"]).toBeUndefined();

    // Should have other devDependencies
    expect(packageJson.devDependencies["tsx-strict"]).toBe("^0.1.4");
    expect(packageJson.devDependencies.prisma).toBe("^6.11.1");

    // Check zod dependencies
    expect(packageJson.dependencies.zod).toBe("^3.24.2");
    expect(packageJson.dependencies["zod-to-json-schema"]).toBe("^3.24.6");

    // Should not have class-validator dependencies
    expect(packageJson.dependencies["reflect-metadata"]).toBeUndefined();
    expect(packageJson.dependencies["class-transformer"]).toBeUndefined();
    expect(packageJson.dependencies["class-validator"]).toBeUndefined();
    expect(
      packageJson.dependencies["class-validator-jsonschema"]
    ).toBeUndefined();
  });

  it("should handle no validation type", () => {
    const context = {
      projectName: "my-project",
      typescript: true,
      validation: {}, // No type specified
    };

    const result = renderTemplate(templatePath, context);
    const packageJson = JSON.parse(result);

    // Should have basic dependencies without validation libraries
    expect(packageJson.dependencies.arkos).toBe("^1.2.16-beta");
    expect(packageJson.dependencies.express).toBe("^4.21.2");
    expect(packageJson.dependencies["@prisma/client"]).toBe("^6.4.1");
    expect(packageJson.dependencies["swagger-jsdoc"]).toBe("^6.2.8");

    // Should not have any validation dependencies
    expect(packageJson.dependencies.zod).toBeUndefined();
    expect(packageJson.dependencies["zod-to-json-schema"]).toBeUndefined();
    expect(packageJson.dependencies["reflect-metadata"]).toBeUndefined();
    expect(packageJson.dependencies["class-transformer"]).toBeUndefined();
    expect(packageJson.dependencies["class-validator"]).toBeUndefined();
    expect(
      packageJson.dependencies["class-validator-jsonschema"]
    ).toBeUndefined();
  });

  it("should not contain any unresolved template variables", () => {
    const context = {
      projectName: "test-project",
      typescript: true,
      validation: {
        type: "class-validator",
      },
    };

    const result = renderTemplate(templatePath, context);

    // Ensure no Handlebars variables are left in the output
    expect(result).not.toContain("{{");
    expect(result).not.toContain("}}");
    expect(result).not.toContain("#if");
    expect(result).not.toContain("#unless");
  });

  it("should produce valid JSON output", () => {
    const context = {
      projectName: "valid-json-test",
      typescript: false,
      validation: {
        type: "zod",
      },
    };

    const result = renderTemplate(templatePath, context);

    // Should parse without throwing an error
    expect(() => JSON.parse(result)).not.toThrow();

    // Should be an object
    const packageJson = JSON.parse(result);
    expect(typeof packageJson).toBe("object");
    expect(packageJson.name).toBe("valid-json-test");
  });

  it("should handle edge cases with missing context properties", () => {
    // Test with minimal context
    const context = {
      projectName: "minimal-project",
      // typescript and validation are undefined
    };

    const result = renderTemplate(templatePath, context);
    const packageJson = JSON.parse(result);

    expect(packageJson.name).toBe("minimal-project");
    expect(packageJson.type).toBe("module"); // Default to JavaScript when typescript is undefined

    // Should not have any validation dependencies
    expect(packageJson.dependencies.zod).toBeUndefined();
    expect(packageJson.dependencies["zod-to-json-schema"]).toBeUndefined();
    expect(packageJson.dependencies["reflect-metadata"]).toBeUndefined();
  });
});
